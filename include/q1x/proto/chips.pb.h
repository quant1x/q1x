// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chips.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chips_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chips_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chips_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chips_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chips_2eproto;
namespace datasets {
class ChipDistribution;
struct ChipDistributionDefaultTypeInternal;
extern ChipDistributionDefaultTypeInternal _ChipDistribution_default_instance_;
class Chips;
struct ChipsDefaultTypeInternal;
extern ChipsDefaultTypeInternal _Chips_default_instance_;
class Line;
struct LineDefaultTypeInternal;
extern LineDefaultTypeInternal _Line_default_instance_;
}  // namespace datasets
PROTOBUF_NAMESPACE_OPEN
template<> ::datasets::ChipDistribution* Arena::CreateMaybeMessage<::datasets::ChipDistribution>(Arena*);
template<> ::datasets::Chips* Arena::CreateMaybeMessage<::datasets::Chips>(Arena*);
template<> ::datasets::Line* Arena::CreateMaybeMessage<::datasets::Line>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace datasets {

// ===================================================================

class Line final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datasets.Line) */ {
 public:
  inline Line() : Line(nullptr) {}
  ~Line() override;
  explicit PROTOBUF_CONSTEXPR Line(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Line(const Line& from);
  Line(Line&& from) noexcept
    : Line() {
    *this = ::std::move(from);
  }

  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }
  inline Line& operator=(Line&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Line& default_instance() {
    return *internal_default_instance();
  }
  static inline const Line* internal_default_instance() {
    return reinterpret_cast<const Line*>(
               &_Line_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Line& a, Line& b) {
    a.Swap(&b);
  }
  inline void Swap(Line* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Line* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Line* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Line>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Line& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Line& from) {
    Line::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Line* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datasets.Line";
  }
  protected:
  explicit Line(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyFieldNumber = 2,
    kSellFieldNumber = 3,
    kPriceFieldNumber = 1,
  };
  // double buy = 2;
  void clear_buy();
  double buy() const;
  void set_buy(double value);
  private:
  double _internal_buy() const;
  void _internal_set_buy(double value);
  public:

  // double sell = 3;
  void clear_sell();
  double sell() const;
  void set_sell(double value);
  private:
  double _internal_sell() const;
  void _internal_set_sell(double value);
  public:

  // int32 price = 1;
  void clear_price();
  int32_t price() const;
  void set_price(int32_t value);
  private:
  int32_t _internal_price() const;
  void _internal_set_price(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:datasets.Line)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double buy_;
    double sell_;
    int32_t price_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chips_2eproto;
};
// -------------------------------------------------------------------

class Chips final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datasets.Chips) */ {
 public:
  inline Chips() : Chips(nullptr) {}
  ~Chips() override;
  explicit PROTOBUF_CONSTEXPR Chips(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chips(const Chips& from);
  Chips(Chips&& from) noexcept
    : Chips() {
    *this = ::std::move(from);
  }

  inline Chips& operator=(const Chips& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chips& operator=(Chips&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chips& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chips* internal_default_instance() {
    return reinterpret_cast<const Chips*>(
               &_Chips_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Chips& a, Chips& b) {
    a.Swap(&b);
  }
  inline void Swap(Chips* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chips* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chips* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Chips>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Chips& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Chips& from) {
    Chips::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chips* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datasets.Chips";
  }
  protected:
  explicit Chips(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistFieldNumber = 2,
    kDateFieldNumber = 1,
  };
  // repeated .datasets.Line dist = 2;
  int dist_size() const;
  private:
  int _internal_dist_size() const;
  public:
  void clear_dist();
  ::datasets::Line* mutable_dist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::datasets::Line >*
      mutable_dist();
  private:
  const ::datasets::Line& _internal_dist(int index) const;
  ::datasets::Line* _internal_add_dist();
  public:
  const ::datasets::Line& dist(int index) const;
  ::datasets::Line* add_dist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::datasets::Line >&
      dist() const;

  // string date = 1;
  void clear_date();
  const std::string& date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_date();
  PROTOBUF_NODISCARD std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // @@protoc_insertion_point(class_scope:datasets.Chips)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::datasets::Line > dist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chips_2eproto;
};
// -------------------------------------------------------------------

class ChipDistribution final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datasets.ChipDistribution) */ {
 public:
  inline ChipDistribution() : ChipDistribution(nullptr) {}
  ~ChipDistribution() override;
  explicit PROTOBUF_CONSTEXPR ChipDistribution(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChipDistribution(const ChipDistribution& from);
  ChipDistribution(ChipDistribution&& from) noexcept
    : ChipDistribution() {
    *this = ::std::move(from);
  }

  inline ChipDistribution& operator=(const ChipDistribution& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChipDistribution& operator=(ChipDistribution&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChipDistribution& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChipDistribution* internal_default_instance() {
    return reinterpret_cast<const ChipDistribution*>(
               &_ChipDistribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChipDistribution& a, ChipDistribution& b) {
    a.Swap(&b);
  }
  inline void Swap(ChipDistribution* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChipDistribution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChipDistribution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChipDistribution>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChipDistribution& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChipDistribution& from) {
    ChipDistribution::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChipDistribution* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datasets.ChipDistribution";
  }
  protected:
  explicit ChipDistribution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .datasets.Chips list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::datasets::Chips* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::datasets::Chips >*
      mutable_list();
  private:
  const ::datasets::Chips& _internal_list(int index) const;
  ::datasets::Chips* _internal_add_list();
  public:
  const ::datasets::Chips& list(int index) const;
  ::datasets::Chips* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::datasets::Chips >&
      list() const;

  // @@protoc_insertion_point(class_scope:datasets.ChipDistribution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::datasets::Chips > list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chips_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Line

// int32 price = 1;
inline void Line::clear_price() {
  _impl_.price_ = 0;
}
inline int32_t Line::_internal_price() const {
  return _impl_.price_;
}
inline int32_t Line::price() const {
  // @@protoc_insertion_point(field_get:datasets.Line.price)
  return _internal_price();
}
inline void Line::_internal_set_price(int32_t value) {
  
  _impl_.price_ = value;
}
inline void Line::set_price(int32_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:datasets.Line.price)
}

// double buy = 2;
inline void Line::clear_buy() {
  _impl_.buy_ = 0;
}
inline double Line::_internal_buy() const {
  return _impl_.buy_;
}
inline double Line::buy() const {
  // @@protoc_insertion_point(field_get:datasets.Line.buy)
  return _internal_buy();
}
inline void Line::_internal_set_buy(double value) {
  
  _impl_.buy_ = value;
}
inline void Line::set_buy(double value) {
  _internal_set_buy(value);
  // @@protoc_insertion_point(field_set:datasets.Line.buy)
}

// double sell = 3;
inline void Line::clear_sell() {
  _impl_.sell_ = 0;
}
inline double Line::_internal_sell() const {
  return _impl_.sell_;
}
inline double Line::sell() const {
  // @@protoc_insertion_point(field_get:datasets.Line.sell)
  return _internal_sell();
}
inline void Line::_internal_set_sell(double value) {
  
  _impl_.sell_ = value;
}
inline void Line::set_sell(double value) {
  _internal_set_sell(value);
  // @@protoc_insertion_point(field_set:datasets.Line.sell)
}

// -------------------------------------------------------------------

// Chips

// string date = 1;
inline void Chips::clear_date() {
  _impl_.date_.ClearToEmpty();
}
inline const std::string& Chips::date() const {
  // @@protoc_insertion_point(field_get:datasets.Chips.date)
  return _internal_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Chips::set_date(ArgT0&& arg0, ArgT... args) {
 
 _impl_.date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datasets.Chips.date)
}
inline std::string* Chips::mutable_date() {
  std::string* _s = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:datasets.Chips.date)
  return _s;
}
inline const std::string& Chips::_internal_date() const {
  return _impl_.date_.Get();
}
inline void Chips::_internal_set_date(const std::string& value) {
  
  _impl_.date_.Set(value, GetArenaForAllocation());
}
inline std::string* Chips::_internal_mutable_date() {
  
  return _impl_.date_.Mutable(GetArenaForAllocation());
}
inline std::string* Chips::release_date() {
  // @@protoc_insertion_point(field_release:datasets.Chips.date)
  return _impl_.date_.Release();
}
inline void Chips::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  _impl_.date_.SetAllocated(date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.date_.IsDefault()) {
    _impl_.date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datasets.Chips.date)
}

// repeated .datasets.Line dist = 2;
inline int Chips::_internal_dist_size() const {
  return _impl_.dist_.size();
}
inline int Chips::dist_size() const {
  return _internal_dist_size();
}
inline void Chips::clear_dist() {
  _impl_.dist_.Clear();
}
inline ::datasets::Line* Chips::mutable_dist(int index) {
  // @@protoc_insertion_point(field_mutable:datasets.Chips.dist)
  return _impl_.dist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::datasets::Line >*
Chips::mutable_dist() {
  // @@protoc_insertion_point(field_mutable_list:datasets.Chips.dist)
  return &_impl_.dist_;
}
inline const ::datasets::Line& Chips::_internal_dist(int index) const {
  return _impl_.dist_.Get(index);
}
inline const ::datasets::Line& Chips::dist(int index) const {
  // @@protoc_insertion_point(field_get:datasets.Chips.dist)
  return _internal_dist(index);
}
inline ::datasets::Line* Chips::_internal_add_dist() {
  return _impl_.dist_.Add();
}
inline ::datasets::Line* Chips::add_dist() {
  ::datasets::Line* _add = _internal_add_dist();
  // @@protoc_insertion_point(field_add:datasets.Chips.dist)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::datasets::Line >&
Chips::dist() const {
  // @@protoc_insertion_point(field_list:datasets.Chips.dist)
  return _impl_.dist_;
}

// -------------------------------------------------------------------

// ChipDistribution

// repeated .datasets.Chips list = 1;
inline int ChipDistribution::_internal_list_size() const {
  return _impl_.list_.size();
}
inline int ChipDistribution::list_size() const {
  return _internal_list_size();
}
inline void ChipDistribution::clear_list() {
  _impl_.list_.Clear();
}
inline ::datasets::Chips* ChipDistribution::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:datasets.ChipDistribution.list)
  return _impl_.list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::datasets::Chips >*
ChipDistribution::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:datasets.ChipDistribution.list)
  return &_impl_.list_;
}
inline const ::datasets::Chips& ChipDistribution::_internal_list(int index) const {
  return _impl_.list_.Get(index);
}
inline const ::datasets::Chips& ChipDistribution::list(int index) const {
  // @@protoc_insertion_point(field_get:datasets.ChipDistribution.list)
  return _internal_list(index);
}
inline ::datasets::Chips* ChipDistribution::_internal_add_list() {
  return _impl_.list_.Add();
}
inline ::datasets::Chips* ChipDistribution::add_list() {
  ::datasets::Chips* _add = _internal_add_list();
  // @@protoc_insertion_point(field_add:datasets.ChipDistribution.list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::datasets::Chips >&
ChipDistribution::list() const {
  // @@protoc_insertion_point(field_list:datasets.ChipDistribution.list)
  return _impl_.list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace datasets

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chips_2eproto
