// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/kline.proto

#include "kline.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR KLine::KLine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.open_)*/{}
  , /*decltype(_impl_.close_)*/{}
  , /*decltype(_impl_.high_)*/{}
  , /*decltype(_impl_.low_)*/{}
  , /*decltype(_impl_.volume_)*/{}
  , /*decltype(_impl_.amount_)*/{}
  , /*decltype(_impl_.up_)*/{}
  , /*decltype(_impl_._up_cached_byte_size_)*/{0}
  , /*decltype(_impl_.down_)*/{}
  , /*decltype(_impl_._down_cached_byte_size_)*/{0}
  , /*decltype(_impl_.datetime_)*/{}
  , /*decltype(_impl_._datetime_cached_byte_size_)*/{0}
  , /*decltype(_impl_.adjustmentcount_)*/{}
  , /*decltype(_impl_._adjustmentcount_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KLineDefaultTypeInternal() {}
  union {
    KLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KLineDefaultTypeInternal _KLine_default_instance_;
static ::_pb::Metadata file_level_metadata_proto_2fkline_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proto_2fkline_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2fkline_2eproto = nullptr;

const uint32_t TableStruct_proto_2fkline_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KLine, _impl_.open_),
  PROTOBUF_FIELD_OFFSET(::KLine, _impl_.close_),
  PROTOBUF_FIELD_OFFSET(::KLine, _impl_.high_),
  PROTOBUF_FIELD_OFFSET(::KLine, _impl_.low_),
  PROTOBUF_FIELD_OFFSET(::KLine, _impl_.volume_),
  PROTOBUF_FIELD_OFFSET(::KLine, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::KLine, _impl_.up_),
  PROTOBUF_FIELD_OFFSET(::KLine, _impl_.down_),
  PROTOBUF_FIELD_OFFSET(::KLine, _impl_.datetime_),
  PROTOBUF_FIELD_OFFSET(::KLine, _impl_.adjustmentcount_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::KLine)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_KLine_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2fkline_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021proto/kline.proto\"\244\001\n\005KLine\022\014\n\004Open\030\001 "
  "\003(\001\022\r\n\005Close\030\002 \003(\001\022\014\n\004High\030\003 \003(\001\022\013\n\003Low\030"
  "\004 \003(\001\022\016\n\006Volume\030\005 \003(\001\022\016\n\006Amount\030\006 \003(\001\022\n\n"
  "\002Up\030\007 \003(\005\022\014\n\004Down\030\010 \003(\005\022\020\n\010Datetime\030\t \003("
  "\003\022\027\n\017AdjustmentCount\030\n \003(\005b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_proto_2fkline_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fkline_2eproto = {
    false, false, 194, descriptor_table_protodef_proto_2fkline_2eproto,
    "proto/kline.proto",
    &descriptor_table_proto_2fkline_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_proto_2fkline_2eproto::offsets,
    file_level_metadata_proto_2fkline_2eproto, file_level_enum_descriptors_proto_2fkline_2eproto,
    file_level_service_descriptors_proto_2fkline_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fkline_2eproto_getter() {
  return &descriptor_table_proto_2fkline_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fkline_2eproto(&descriptor_table_proto_2fkline_2eproto);

// ===================================================================

class KLine::_Internal {
 public:
};

KLine::KLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KLine)
}
KLine::KLine(const KLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KLine* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.open_){from._impl_.open_}
    , decltype(_impl_.close_){from._impl_.close_}
    , decltype(_impl_.high_){from._impl_.high_}
    , decltype(_impl_.low_){from._impl_.low_}
    , decltype(_impl_.volume_){from._impl_.volume_}
    , decltype(_impl_.amount_){from._impl_.amount_}
    , decltype(_impl_.up_){from._impl_.up_}
    , /*decltype(_impl_._up_cached_byte_size_)*/{0}
    , decltype(_impl_.down_){from._impl_.down_}
    , /*decltype(_impl_._down_cached_byte_size_)*/{0}
    , decltype(_impl_.datetime_){from._impl_.datetime_}
    , /*decltype(_impl_._datetime_cached_byte_size_)*/{0}
    , decltype(_impl_.adjustmentcount_){from._impl_.adjustmentcount_}
    , /*decltype(_impl_._adjustmentcount_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KLine)
}

inline void KLine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.open_){arena}
    , decltype(_impl_.close_){arena}
    , decltype(_impl_.high_){arena}
    , decltype(_impl_.low_){arena}
    , decltype(_impl_.volume_){arena}
    , decltype(_impl_.amount_){arena}
    , decltype(_impl_.up_){arena}
    , /*decltype(_impl_._up_cached_byte_size_)*/{0}
    , decltype(_impl_.down_){arena}
    , /*decltype(_impl_._down_cached_byte_size_)*/{0}
    , decltype(_impl_.datetime_){arena}
    , /*decltype(_impl_._datetime_cached_byte_size_)*/{0}
    , decltype(_impl_.adjustmentcount_){arena}
    , /*decltype(_impl_._adjustmentcount_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KLine::~KLine() {
  // @@protoc_insertion_point(destructor:KLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.open_.~RepeatedField();
  _impl_.close_.~RepeatedField();
  _impl_.high_.~RepeatedField();
  _impl_.low_.~RepeatedField();
  _impl_.volume_.~RepeatedField();
  _impl_.amount_.~RepeatedField();
  _impl_.up_.~RepeatedField();
  _impl_.down_.~RepeatedField();
  _impl_.datetime_.~RepeatedField();
  _impl_.adjustmentcount_.~RepeatedField();
}

void KLine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KLine::Clear() {
// @@protoc_insertion_point(message_clear_start:KLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.open_.Clear();
  _impl_.close_.Clear();
  _impl_.high_.Clear();
  _impl_.low_.Clear();
  _impl_.volume_.Clear();
  _impl_.amount_.Clear();
  _impl_.up_.Clear();
  _impl_.down_.Clear();
  _impl_.datetime_.Clear();
  _impl_.adjustmentcount_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double Open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_open(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_open(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double Close = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_close(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_close(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double High = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_high(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_high(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double Low = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_low(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 33) {
          _internal_add_low(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double Volume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_volume(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 41) {
          _internal_add_volume(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double Amount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_amount(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 49) {
          _internal_add_amount(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 Up = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_up(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_up(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 Down = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_down(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_down(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 Datetime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_datetime(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_datetime(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 AdjustmentCount = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_adjustmentcount(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_adjustmentcount(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double Open = 1;
  if (this->_internal_open_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_open(), target);
  }

  // repeated double Close = 2;
  if (this->_internal_close_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_close(), target);
  }

  // repeated double High = 3;
  if (this->_internal_high_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_high(), target);
  }

  // repeated double Low = 4;
  if (this->_internal_low_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_low(), target);
  }

  // repeated double Volume = 5;
  if (this->_internal_volume_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_volume(), target);
  }

  // repeated double Amount = 6;
  if (this->_internal_amount_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_amount(), target);
  }

  // repeated int32 Up = 7;
  {
    int byte_size = _impl_._up_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_up(), byte_size, target);
    }
  }

  // repeated int32 Down = 8;
  {
    int byte_size = _impl_._down_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_down(), byte_size, target);
    }
  }

  // repeated int64 Datetime = 9;
  {
    int byte_size = _impl_._datetime_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          9, _internal_datetime(), byte_size, target);
    }
  }

  // repeated int32 AdjustmentCount = 10;
  {
    int byte_size = _impl_._adjustmentcount_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_adjustmentcount(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KLine)
  return target;
}

size_t KLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double Open = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_open_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double Close = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_close_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double High = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_high_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double Low = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_low_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double Volume = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_volume_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double Amount = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_amount_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 Up = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.up_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._up_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 Down = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.down_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._down_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 Datetime = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.datetime_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._datetime_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 AdjustmentCount = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.adjustmentcount_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._adjustmentcount_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KLine::GetClassData() const { return &_class_data_; }


void KLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KLine*>(&to_msg);
  auto& from = static_cast<const KLine&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KLine)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.open_.MergeFrom(from._impl_.open_);
  _this->_impl_.close_.MergeFrom(from._impl_.close_);
  _this->_impl_.high_.MergeFrom(from._impl_.high_);
  _this->_impl_.low_.MergeFrom(from._impl_.low_);
  _this->_impl_.volume_.MergeFrom(from._impl_.volume_);
  _this->_impl_.amount_.MergeFrom(from._impl_.amount_);
  _this->_impl_.up_.MergeFrom(from._impl_.up_);
  _this->_impl_.down_.MergeFrom(from._impl_.down_);
  _this->_impl_.datetime_.MergeFrom(from._impl_.datetime_);
  _this->_impl_.adjustmentcount_.MergeFrom(from._impl_.adjustmentcount_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KLine::CopyFrom(const KLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KLine::IsInitialized() const {
  return true;
}

void KLine::InternalSwap(KLine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.open_.InternalSwap(&other->_impl_.open_);
  _impl_.close_.InternalSwap(&other->_impl_.close_);
  _impl_.high_.InternalSwap(&other->_impl_.high_);
  _impl_.low_.InternalSwap(&other->_impl_.low_);
  _impl_.volume_.InternalSwap(&other->_impl_.volume_);
  _impl_.amount_.InternalSwap(&other->_impl_.amount_);
  _impl_.up_.InternalSwap(&other->_impl_.up_);
  _impl_.down_.InternalSwap(&other->_impl_.down_);
  _impl_.datetime_.InternalSwap(&other->_impl_.datetime_);
  _impl_.adjustmentcount_.InternalSwap(&other->_impl_.adjustmentcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fkline_2eproto_getter, &descriptor_table_proto_2fkline_2eproto_once,
      file_level_metadata_proto_2fkline_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KLine*
Arena::CreateMaybeMessage< ::KLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KLine >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
