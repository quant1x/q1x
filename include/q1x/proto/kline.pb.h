// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/kline.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fkline_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fkline_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fkline_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fkline_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fkline_2eproto;
class KLine;
struct KLineDefaultTypeInternal;
extern KLineDefaultTypeInternal _KLine_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::KLine* Arena::CreateMaybeMessage<::KLine>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class KLine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KLine) */ {
 public:
  inline KLine() : KLine(nullptr) {}
  ~KLine() override;
  explicit PROTOBUF_CONSTEXPR KLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KLine(const KLine& from);
  KLine(KLine&& from) noexcept
    : KLine() {
    *this = ::std::move(from);
  }

  inline KLine& operator=(const KLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline KLine& operator=(KLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const KLine* internal_default_instance() {
    return reinterpret_cast<const KLine*>(
               &_KLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KLine& a, KLine& b) {
    a.Swap(&b);
  }
  inline void Swap(KLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KLine>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KLine& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KLine& from) {
    KLine::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KLine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KLine";
  }
  protected:
  explicit KLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenFieldNumber = 1,
    kCloseFieldNumber = 2,
    kHighFieldNumber = 3,
    kLowFieldNumber = 4,
    kVolumeFieldNumber = 5,
    kAmountFieldNumber = 6,
    kUpFieldNumber = 7,
    kDownFieldNumber = 8,
    kDatetimeFieldNumber = 9,
    kAdjustmentCountFieldNumber = 10,
  };
  // repeated double Open = 1;
  int open_size() const;
  private:
  int _internal_open_size() const;
  public:
  void clear_open();
  private:
  double _internal_open(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_open() const;
  void _internal_add_open(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_open();
  public:
  double open(int index) const;
  void set_open(int index, double value);
  void add_open(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      open() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_open();

  // repeated double Close = 2;
  int close_size() const;
  private:
  int _internal_close_size() const;
  public:
  void clear_close();
  private:
  double _internal_close(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_close() const;
  void _internal_add_close(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_close();
  public:
  double close(int index) const;
  void set_close(int index, double value);
  void add_close(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      close() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_close();

  // repeated double High = 3;
  int high_size() const;
  private:
  int _internal_high_size() const;
  public:
  void clear_high();
  private:
  double _internal_high(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_high() const;
  void _internal_add_high(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_high();
  public:
  double high(int index) const;
  void set_high(int index, double value);
  void add_high(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      high() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_high();

  // repeated double Low = 4;
  int low_size() const;
  private:
  int _internal_low_size() const;
  public:
  void clear_low();
  private:
  double _internal_low(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_low() const;
  void _internal_add_low(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_low();
  public:
  double low(int index) const;
  void set_low(int index, double value);
  void add_low(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      low() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_low();

  // repeated double Volume = 5;
  int volume_size() const;
  private:
  int _internal_volume_size() const;
  public:
  void clear_volume();
  private:
  double _internal_volume(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_volume() const;
  void _internal_add_volume(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_volume();
  public:
  double volume(int index) const;
  void set_volume(int index, double value);
  void add_volume(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      volume() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_volume();

  // repeated double Amount = 6;
  int amount_size() const;
  private:
  int _internal_amount_size() const;
  public:
  void clear_amount();
  private:
  double _internal_amount(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_amount() const;
  void _internal_add_amount(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_amount();
  public:
  double amount(int index) const;
  void set_amount(int index, double value);
  void add_amount(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      amount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_amount();

  // repeated int32 Up = 7;
  int up_size() const;
  private:
  int _internal_up_size() const;
  public:
  void clear_up();
  private:
  int32_t _internal_up(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_up() const;
  void _internal_add_up(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_up();
  public:
  int32_t up(int index) const;
  void set_up(int index, int32_t value);
  void add_up(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      up() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_up();

  // repeated int32 Down = 8;
  int down_size() const;
  private:
  int _internal_down_size() const;
  public:
  void clear_down();
  private:
  int32_t _internal_down(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_down() const;
  void _internal_add_down(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_down();
  public:
  int32_t down(int index) const;
  void set_down(int index, int32_t value);
  void add_down(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      down() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_down();

  // repeated int64 Datetime = 9;
  int datetime_size() const;
  private:
  int _internal_datetime_size() const;
  public:
  void clear_datetime();
  private:
  int64_t _internal_datetime(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_datetime() const;
  void _internal_add_datetime(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_datetime();
  public:
  int64_t datetime(int index) const;
  void set_datetime(int index, int64_t value);
  void add_datetime(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      datetime() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_datetime();

  // repeated int32 AdjustmentCount = 10;
  int adjustmentcount_size() const;
  private:
  int _internal_adjustmentcount_size() const;
  public:
  void clear_adjustmentcount();
  private:
  int32_t _internal_adjustmentcount(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_adjustmentcount() const;
  void _internal_add_adjustmentcount(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_adjustmentcount();
  public:
  int32_t adjustmentcount(int index) const;
  void set_adjustmentcount(int index, int32_t value);
  void add_adjustmentcount(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      adjustmentcount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_adjustmentcount();

  // @@protoc_insertion_point(class_scope:KLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > open_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > close_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > high_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > low_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > volume_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > amount_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > up_;
    mutable std::atomic<int> _up_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > down_;
    mutable std::atomic<int> _down_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > datetime_;
    mutable std::atomic<int> _datetime_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > adjustmentcount_;
    mutable std::atomic<int> _adjustmentcount_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fkline_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KLine

// repeated double Open = 1;
inline int KLine::_internal_open_size() const {
  return _impl_.open_.size();
}
inline int KLine::open_size() const {
  return _internal_open_size();
}
inline void KLine::clear_open() {
  _impl_.open_.Clear();
}
inline double KLine::_internal_open(int index) const {
  return _impl_.open_.Get(index);
}
inline double KLine::open(int index) const {
  // @@protoc_insertion_point(field_get:KLine.Open)
  return _internal_open(index);
}
inline void KLine::set_open(int index, double value) {
  _impl_.open_.Set(index, value);
  // @@protoc_insertion_point(field_set:KLine.Open)
}
inline void KLine::_internal_add_open(double value) {
  _impl_.open_.Add(value);
}
inline void KLine::add_open(double value) {
  _internal_add_open(value);
  // @@protoc_insertion_point(field_add:KLine.Open)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
KLine::_internal_open() const {
  return _impl_.open_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
KLine::open() const {
  // @@protoc_insertion_point(field_list:KLine.Open)
  return _internal_open();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
KLine::_internal_mutable_open() {
  return &_impl_.open_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
KLine::mutable_open() {
  // @@protoc_insertion_point(field_mutable_list:KLine.Open)
  return _internal_mutable_open();
}

// repeated double Close = 2;
inline int KLine::_internal_close_size() const {
  return _impl_.close_.size();
}
inline int KLine::close_size() const {
  return _internal_close_size();
}
inline void KLine::clear_close() {
  _impl_.close_.Clear();
}
inline double KLine::_internal_close(int index) const {
  return _impl_.close_.Get(index);
}
inline double KLine::close(int index) const {
  // @@protoc_insertion_point(field_get:KLine.Close)
  return _internal_close(index);
}
inline void KLine::set_close(int index, double value) {
  _impl_.close_.Set(index, value);
  // @@protoc_insertion_point(field_set:KLine.Close)
}
inline void KLine::_internal_add_close(double value) {
  _impl_.close_.Add(value);
}
inline void KLine::add_close(double value) {
  _internal_add_close(value);
  // @@protoc_insertion_point(field_add:KLine.Close)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
KLine::_internal_close() const {
  return _impl_.close_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
KLine::close() const {
  // @@protoc_insertion_point(field_list:KLine.Close)
  return _internal_close();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
KLine::_internal_mutable_close() {
  return &_impl_.close_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
KLine::mutable_close() {
  // @@protoc_insertion_point(field_mutable_list:KLine.Close)
  return _internal_mutable_close();
}

// repeated double High = 3;
inline int KLine::_internal_high_size() const {
  return _impl_.high_.size();
}
inline int KLine::high_size() const {
  return _internal_high_size();
}
inline void KLine::clear_high() {
  _impl_.high_.Clear();
}
inline double KLine::_internal_high(int index) const {
  return _impl_.high_.Get(index);
}
inline double KLine::high(int index) const {
  // @@protoc_insertion_point(field_get:KLine.High)
  return _internal_high(index);
}
inline void KLine::set_high(int index, double value) {
  _impl_.high_.Set(index, value);
  // @@protoc_insertion_point(field_set:KLine.High)
}
inline void KLine::_internal_add_high(double value) {
  _impl_.high_.Add(value);
}
inline void KLine::add_high(double value) {
  _internal_add_high(value);
  // @@protoc_insertion_point(field_add:KLine.High)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
KLine::_internal_high() const {
  return _impl_.high_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
KLine::high() const {
  // @@protoc_insertion_point(field_list:KLine.High)
  return _internal_high();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
KLine::_internal_mutable_high() {
  return &_impl_.high_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
KLine::mutable_high() {
  // @@protoc_insertion_point(field_mutable_list:KLine.High)
  return _internal_mutable_high();
}

// repeated double Low = 4;
inline int KLine::_internal_low_size() const {
  return _impl_.low_.size();
}
inline int KLine::low_size() const {
  return _internal_low_size();
}
inline void KLine::clear_low() {
  _impl_.low_.Clear();
}
inline double KLine::_internal_low(int index) const {
  return _impl_.low_.Get(index);
}
inline double KLine::low(int index) const {
  // @@protoc_insertion_point(field_get:KLine.Low)
  return _internal_low(index);
}
inline void KLine::set_low(int index, double value) {
  _impl_.low_.Set(index, value);
  // @@protoc_insertion_point(field_set:KLine.Low)
}
inline void KLine::_internal_add_low(double value) {
  _impl_.low_.Add(value);
}
inline void KLine::add_low(double value) {
  _internal_add_low(value);
  // @@protoc_insertion_point(field_add:KLine.Low)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
KLine::_internal_low() const {
  return _impl_.low_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
KLine::low() const {
  // @@protoc_insertion_point(field_list:KLine.Low)
  return _internal_low();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
KLine::_internal_mutable_low() {
  return &_impl_.low_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
KLine::mutable_low() {
  // @@protoc_insertion_point(field_mutable_list:KLine.Low)
  return _internal_mutable_low();
}

// repeated double Volume = 5;
inline int KLine::_internal_volume_size() const {
  return _impl_.volume_.size();
}
inline int KLine::volume_size() const {
  return _internal_volume_size();
}
inline void KLine::clear_volume() {
  _impl_.volume_.Clear();
}
inline double KLine::_internal_volume(int index) const {
  return _impl_.volume_.Get(index);
}
inline double KLine::volume(int index) const {
  // @@protoc_insertion_point(field_get:KLine.Volume)
  return _internal_volume(index);
}
inline void KLine::set_volume(int index, double value) {
  _impl_.volume_.Set(index, value);
  // @@protoc_insertion_point(field_set:KLine.Volume)
}
inline void KLine::_internal_add_volume(double value) {
  _impl_.volume_.Add(value);
}
inline void KLine::add_volume(double value) {
  _internal_add_volume(value);
  // @@protoc_insertion_point(field_add:KLine.Volume)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
KLine::_internal_volume() const {
  return _impl_.volume_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
KLine::volume() const {
  // @@protoc_insertion_point(field_list:KLine.Volume)
  return _internal_volume();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
KLine::_internal_mutable_volume() {
  return &_impl_.volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
KLine::mutable_volume() {
  // @@protoc_insertion_point(field_mutable_list:KLine.Volume)
  return _internal_mutable_volume();
}

// repeated double Amount = 6;
inline int KLine::_internal_amount_size() const {
  return _impl_.amount_.size();
}
inline int KLine::amount_size() const {
  return _internal_amount_size();
}
inline void KLine::clear_amount() {
  _impl_.amount_.Clear();
}
inline double KLine::_internal_amount(int index) const {
  return _impl_.amount_.Get(index);
}
inline double KLine::amount(int index) const {
  // @@protoc_insertion_point(field_get:KLine.Amount)
  return _internal_amount(index);
}
inline void KLine::set_amount(int index, double value) {
  _impl_.amount_.Set(index, value);
  // @@protoc_insertion_point(field_set:KLine.Amount)
}
inline void KLine::_internal_add_amount(double value) {
  _impl_.amount_.Add(value);
}
inline void KLine::add_amount(double value) {
  _internal_add_amount(value);
  // @@protoc_insertion_point(field_add:KLine.Amount)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
KLine::_internal_amount() const {
  return _impl_.amount_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
KLine::amount() const {
  // @@protoc_insertion_point(field_list:KLine.Amount)
  return _internal_amount();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
KLine::_internal_mutable_amount() {
  return &_impl_.amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
KLine::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:KLine.Amount)
  return _internal_mutable_amount();
}

// repeated int32 Up = 7;
inline int KLine::_internal_up_size() const {
  return _impl_.up_.size();
}
inline int KLine::up_size() const {
  return _internal_up_size();
}
inline void KLine::clear_up() {
  _impl_.up_.Clear();
}
inline int32_t KLine::_internal_up(int index) const {
  return _impl_.up_.Get(index);
}
inline int32_t KLine::up(int index) const {
  // @@protoc_insertion_point(field_get:KLine.Up)
  return _internal_up(index);
}
inline void KLine::set_up(int index, int32_t value) {
  _impl_.up_.Set(index, value);
  // @@protoc_insertion_point(field_set:KLine.Up)
}
inline void KLine::_internal_add_up(int32_t value) {
  _impl_.up_.Add(value);
}
inline void KLine::add_up(int32_t value) {
  _internal_add_up(value);
  // @@protoc_insertion_point(field_add:KLine.Up)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
KLine::_internal_up() const {
  return _impl_.up_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
KLine::up() const {
  // @@protoc_insertion_point(field_list:KLine.Up)
  return _internal_up();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
KLine::_internal_mutable_up() {
  return &_impl_.up_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
KLine::mutable_up() {
  // @@protoc_insertion_point(field_mutable_list:KLine.Up)
  return _internal_mutable_up();
}

// repeated int32 Down = 8;
inline int KLine::_internal_down_size() const {
  return _impl_.down_.size();
}
inline int KLine::down_size() const {
  return _internal_down_size();
}
inline void KLine::clear_down() {
  _impl_.down_.Clear();
}
inline int32_t KLine::_internal_down(int index) const {
  return _impl_.down_.Get(index);
}
inline int32_t KLine::down(int index) const {
  // @@protoc_insertion_point(field_get:KLine.Down)
  return _internal_down(index);
}
inline void KLine::set_down(int index, int32_t value) {
  _impl_.down_.Set(index, value);
  // @@protoc_insertion_point(field_set:KLine.Down)
}
inline void KLine::_internal_add_down(int32_t value) {
  _impl_.down_.Add(value);
}
inline void KLine::add_down(int32_t value) {
  _internal_add_down(value);
  // @@protoc_insertion_point(field_add:KLine.Down)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
KLine::_internal_down() const {
  return _impl_.down_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
KLine::down() const {
  // @@protoc_insertion_point(field_list:KLine.Down)
  return _internal_down();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
KLine::_internal_mutable_down() {
  return &_impl_.down_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
KLine::mutable_down() {
  // @@protoc_insertion_point(field_mutable_list:KLine.Down)
  return _internal_mutable_down();
}

// repeated int64 Datetime = 9;
inline int KLine::_internal_datetime_size() const {
  return _impl_.datetime_.size();
}
inline int KLine::datetime_size() const {
  return _internal_datetime_size();
}
inline void KLine::clear_datetime() {
  _impl_.datetime_.Clear();
}
inline int64_t KLine::_internal_datetime(int index) const {
  return _impl_.datetime_.Get(index);
}
inline int64_t KLine::datetime(int index) const {
  // @@protoc_insertion_point(field_get:KLine.Datetime)
  return _internal_datetime(index);
}
inline void KLine::set_datetime(int index, int64_t value) {
  _impl_.datetime_.Set(index, value);
  // @@protoc_insertion_point(field_set:KLine.Datetime)
}
inline void KLine::_internal_add_datetime(int64_t value) {
  _impl_.datetime_.Add(value);
}
inline void KLine::add_datetime(int64_t value) {
  _internal_add_datetime(value);
  // @@protoc_insertion_point(field_add:KLine.Datetime)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
KLine::_internal_datetime() const {
  return _impl_.datetime_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
KLine::datetime() const {
  // @@protoc_insertion_point(field_list:KLine.Datetime)
  return _internal_datetime();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
KLine::_internal_mutable_datetime() {
  return &_impl_.datetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
KLine::mutable_datetime() {
  // @@protoc_insertion_point(field_mutable_list:KLine.Datetime)
  return _internal_mutable_datetime();
}

// repeated int32 AdjustmentCount = 10;
inline int KLine::_internal_adjustmentcount_size() const {
  return _impl_.adjustmentcount_.size();
}
inline int KLine::adjustmentcount_size() const {
  return _internal_adjustmentcount_size();
}
inline void KLine::clear_adjustmentcount() {
  _impl_.adjustmentcount_.Clear();
}
inline int32_t KLine::_internal_adjustmentcount(int index) const {
  return _impl_.adjustmentcount_.Get(index);
}
inline int32_t KLine::adjustmentcount(int index) const {
  // @@protoc_insertion_point(field_get:KLine.AdjustmentCount)
  return _internal_adjustmentcount(index);
}
inline void KLine::set_adjustmentcount(int index, int32_t value) {
  _impl_.adjustmentcount_.Set(index, value);
  // @@protoc_insertion_point(field_set:KLine.AdjustmentCount)
}
inline void KLine::_internal_add_adjustmentcount(int32_t value) {
  _impl_.adjustmentcount_.Add(value);
}
inline void KLine::add_adjustmentcount(int32_t value) {
  _internal_add_adjustmentcount(value);
  // @@protoc_insertion_point(field_add:KLine.AdjustmentCount)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
KLine::_internal_adjustmentcount() const {
  return _impl_.adjustmentcount_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
KLine::adjustmentcount() const {
  // @@protoc_insertion_point(field_list:KLine.AdjustmentCount)
  return _internal_adjustmentcount();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
KLine::_internal_mutable_adjustmentcount() {
  return &_impl_.adjustmentcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
KLine::mutable_adjustmentcount() {
  // @@protoc_insertion_point(field_mutable_list:KLine.AdjustmentCount)
  return _internal_mutable_adjustmentcount();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fkline_2eproto
