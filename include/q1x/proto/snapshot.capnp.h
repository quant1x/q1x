// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: snapshot.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1002000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(a4c0b2e1f94568f2);
enum class ExchangeState_a4c0b2e1f94568f2: uint16_t {
  DELISTING,
  CLOSING,
  NORMAL,
  PAUSE,
};
CAPNP_DECLARE_ENUM(ExchangeState, a4c0b2e1f94568f2);
CAPNP_DECLARE_SCHEMA(868ed4b2f07211e3);
enum class TradeState_868ed4b2f07211e3: uint16_t {
  DELISTING,
  NORMAL,
  SUSPEND,
  IPO,
};
CAPNP_DECLARE_ENUM(TradeState, 868ed4b2f07211e3);
CAPNP_DECLARE_SCHEMA(9e7fed5b80b1e8b3);
CAPNP_DECLARE_SCHEMA(d337942e9cb50366);

}  // namespace schemas
}  // namespace capnp


typedef ::capnp::schemas::ExchangeState_a4c0b2e1f94568f2 ExchangeState;

typedef ::capnp::schemas::TradeState_868ed4b2f07211e3 TradeState;

struct Snapshot {
  Snapshot() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9e7fed5b80b1e8b3, 47, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QuoteList {
  QuoteList() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d337942e9cb50366, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Snapshot::Reader {
public:
  typedef Snapshot Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasDate() const;
  inline  ::capnp::Text::Reader getDate() const;

  inline bool hasSecurityCode() const;
  inline  ::capnp::Text::Reader getSecurityCode() const;

  inline  ::ExchangeState getExchangeState() const;

  inline  ::TradeState getState() const;

  inline  ::uint8_t getMarket() const;

  inline bool hasCode() const;
  inline  ::capnp::Text::Reader getCode() const;

  inline  ::uint16_t getActive() const;

  inline double getPrice() const;

  inline double getLastClose() const;

  inline double getOpen() const;

  inline double getHigh() const;

  inline double getLow() const;

  inline bool hasServerTime() const;
  inline  ::capnp::Text::Reader getServerTime() const;

  inline  ::int64_t getReversedBytes0() const;

  inline  ::int64_t getReversedBytes1() const;

  inline  ::int64_t getVol() const;

  inline  ::int64_t getCurVol() const;

  inline double getAmount() const;

  inline  ::int64_t getSVol() const;

  inline  ::int64_t getBVol() const;

  inline  ::int64_t getIndexOpenAmount() const;

  inline  ::int64_t getStockOpenAmount() const;

  inline  ::int64_t getOpenVolume() const;

  inline  ::int64_t getCloseVolume() const;

  inline  ::int64_t getIndexUp() const;

  inline  ::int64_t getIndexUpLimit() const;

  inline  ::int64_t getIndexDown() const;

  inline  ::int64_t getIndexDownLimit() const;

  inline double getBid1() const;

  inline double getAsk1() const;

  inline  ::int64_t getBidVol1() const;

  inline  ::int64_t getAskVol1() const;

  inline double getBid2() const;

  inline double getAsk2() const;

  inline  ::int64_t getBidVol2() const;

  inline  ::int64_t getAskVol2() const;

  inline double getBid3() const;

  inline double getAsk3() const;

  inline  ::int64_t getBidVol3() const;

  inline  ::int64_t getAskVol3() const;

  inline double getBid4() const;

  inline double getAsk4() const;

  inline  ::int64_t getBidVol4() const;

  inline  ::int64_t getAskVol4() const;

  inline double getBid5() const;

  inline double getAsk5() const;

  inline  ::int64_t getBidVol5() const;

  inline  ::int64_t getAskVol5() const;

  inline  ::uint16_t getReversedBytes4() const;

  inline  ::int64_t getReversedBytes5() const;

  inline  ::int64_t getReversedBytes6() const;

  inline  ::int64_t getReversedBytes7() const;

  inline  ::int64_t getReversedBytes8() const;

  inline double getRate() const;

  inline  ::uint16_t getActive2() const;

  inline bool hasTimeStamp() const;
  inline  ::capnp::Text::Reader getTimeStamp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Snapshot::Builder {
public:
  typedef Snapshot Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDate();
  inline  ::capnp::Text::Builder getDate();
  inline void setDate( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDate(unsigned int size);
  inline void adoptDate(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDate();

  inline bool hasSecurityCode();
  inline  ::capnp::Text::Builder getSecurityCode();
  inline void setSecurityCode( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSecurityCode(unsigned int size);
  inline void adoptSecurityCode(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSecurityCode();

  inline  ::ExchangeState getExchangeState();
  inline void setExchangeState( ::ExchangeState value);

  inline  ::TradeState getState();
  inline void setState( ::TradeState value);

  inline  ::uint8_t getMarket();
  inline void setMarket( ::uint8_t value);

  inline bool hasCode();
  inline  ::capnp::Text::Builder getCode();
  inline void setCode( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCode(unsigned int size);
  inline void adoptCode(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCode();

  inline  ::uint16_t getActive();
  inline void setActive( ::uint16_t value);

  inline double getPrice();
  inline void setPrice(double value);

  inline double getLastClose();
  inline void setLastClose(double value);

  inline double getOpen();
  inline void setOpen(double value);

  inline double getHigh();
  inline void setHigh(double value);

  inline double getLow();
  inline void setLow(double value);

  inline bool hasServerTime();
  inline  ::capnp::Text::Builder getServerTime();
  inline void setServerTime( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initServerTime(unsigned int size);
  inline void adoptServerTime(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownServerTime();

  inline  ::int64_t getReversedBytes0();
  inline void setReversedBytes0( ::int64_t value);

  inline  ::int64_t getReversedBytes1();
  inline void setReversedBytes1( ::int64_t value);

  inline  ::int64_t getVol();
  inline void setVol( ::int64_t value);

  inline  ::int64_t getCurVol();
  inline void setCurVol( ::int64_t value);

  inline double getAmount();
  inline void setAmount(double value);

  inline  ::int64_t getSVol();
  inline void setSVol( ::int64_t value);

  inline  ::int64_t getBVol();
  inline void setBVol( ::int64_t value);

  inline  ::int64_t getIndexOpenAmount();
  inline void setIndexOpenAmount( ::int64_t value);

  inline  ::int64_t getStockOpenAmount();
  inline void setStockOpenAmount( ::int64_t value);

  inline  ::int64_t getOpenVolume();
  inline void setOpenVolume( ::int64_t value);

  inline  ::int64_t getCloseVolume();
  inline void setCloseVolume( ::int64_t value);

  inline  ::int64_t getIndexUp();
  inline void setIndexUp( ::int64_t value);

  inline  ::int64_t getIndexUpLimit();
  inline void setIndexUpLimit( ::int64_t value);

  inline  ::int64_t getIndexDown();
  inline void setIndexDown( ::int64_t value);

  inline  ::int64_t getIndexDownLimit();
  inline void setIndexDownLimit( ::int64_t value);

  inline double getBid1();
  inline void setBid1(double value);

  inline double getAsk1();
  inline void setAsk1(double value);

  inline  ::int64_t getBidVol1();
  inline void setBidVol1( ::int64_t value);

  inline  ::int64_t getAskVol1();
  inline void setAskVol1( ::int64_t value);

  inline double getBid2();
  inline void setBid2(double value);

  inline double getAsk2();
  inline void setAsk2(double value);

  inline  ::int64_t getBidVol2();
  inline void setBidVol2( ::int64_t value);

  inline  ::int64_t getAskVol2();
  inline void setAskVol2( ::int64_t value);

  inline double getBid3();
  inline void setBid3(double value);

  inline double getAsk3();
  inline void setAsk3(double value);

  inline  ::int64_t getBidVol3();
  inline void setBidVol3( ::int64_t value);

  inline  ::int64_t getAskVol3();
  inline void setAskVol3( ::int64_t value);

  inline double getBid4();
  inline void setBid4(double value);

  inline double getAsk4();
  inline void setAsk4(double value);

  inline  ::int64_t getBidVol4();
  inline void setBidVol4( ::int64_t value);

  inline  ::int64_t getAskVol4();
  inline void setAskVol4( ::int64_t value);

  inline double getBid5();
  inline void setBid5(double value);

  inline double getAsk5();
  inline void setAsk5(double value);

  inline  ::int64_t getBidVol5();
  inline void setBidVol5( ::int64_t value);

  inline  ::int64_t getAskVol5();
  inline void setAskVol5( ::int64_t value);

  inline  ::uint16_t getReversedBytes4();
  inline void setReversedBytes4( ::uint16_t value);

  inline  ::int64_t getReversedBytes5();
  inline void setReversedBytes5( ::int64_t value);

  inline  ::int64_t getReversedBytes6();
  inline void setReversedBytes6( ::int64_t value);

  inline  ::int64_t getReversedBytes7();
  inline void setReversedBytes7( ::int64_t value);

  inline  ::int64_t getReversedBytes8();
  inline void setReversedBytes8( ::int64_t value);

  inline double getRate();
  inline void setRate(double value);

  inline  ::uint16_t getActive2();
  inline void setActive2( ::uint16_t value);

  inline bool hasTimeStamp();
  inline  ::capnp::Text::Builder getTimeStamp();
  inline void setTimeStamp( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTimeStamp(unsigned int size);
  inline void adoptTimeStamp(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTimeStamp();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Snapshot::Pipeline {
public:
  typedef Snapshot Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QuoteList::Reader {
public:
  typedef QuoteList Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSnapshots() const;
  inline  ::capnp::List< ::Snapshot,  ::capnp::Kind::STRUCT>::Reader getSnapshots() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QuoteList::Builder {
public:
  typedef QuoteList Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSnapshots();
  inline  ::capnp::List< ::Snapshot,  ::capnp::Kind::STRUCT>::Builder getSnapshots();
  inline void setSnapshots( ::capnp::List< ::Snapshot,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Snapshot,  ::capnp::Kind::STRUCT>::Builder initSnapshots(unsigned int size);
  inline void adoptSnapshots(::capnp::Orphan< ::capnp::List< ::Snapshot,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Snapshot,  ::capnp::Kind::STRUCT>> disownSnapshots();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QuoteList::Pipeline {
public:
  typedef QuoteList Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool Snapshot::Reader::hasDate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Snapshot::Builder::hasDate() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Snapshot::Reader::getDate() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Snapshot::Builder::getDate() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Snapshot::Builder::setDate( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Snapshot::Builder::initDate(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Snapshot::Builder::adoptDate(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Snapshot::Builder::disownDate() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Snapshot::Reader::hasSecurityCode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Snapshot::Builder::hasSecurityCode() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Snapshot::Reader::getSecurityCode() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Snapshot::Builder::getSecurityCode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Snapshot::Builder::setSecurityCode( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Snapshot::Builder::initSecurityCode(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Snapshot::Builder::adoptSecurityCode(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Snapshot::Builder::disownSecurityCode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::ExchangeState Snapshot::Reader::getExchangeState() const {
  return _reader.getDataField< ::ExchangeState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::ExchangeState Snapshot::Builder::getExchangeState() {
  return _builder.getDataField< ::ExchangeState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setExchangeState( ::ExchangeState value) {
  _builder.setDataField< ::ExchangeState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::TradeState Snapshot::Reader::getState() const {
  return _reader.getDataField< ::TradeState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::TradeState Snapshot::Builder::getState() {
  return _builder.getDataField< ::TradeState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setState( ::TradeState value) {
  _builder.setDataField< ::TradeState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Snapshot::Reader::getMarket() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Snapshot::Builder::getMarket() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setMarket( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Snapshot::Reader::hasCode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Snapshot::Builder::hasCode() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Snapshot::Reader::getCode() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Snapshot::Builder::getCode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Snapshot::Builder::setCode( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Snapshot::Builder::initCode(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Snapshot::Builder::adoptCode(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Snapshot::Builder::disownCode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint16_t Snapshot::Reader::getActive() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Snapshot::Builder::getActive() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setActive( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double Snapshot::Reader::getPrice() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Snapshot::Builder::getPrice() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setPrice(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double Snapshot::Reader::getLastClose() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Snapshot::Builder::getLastClose() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setLastClose(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double Snapshot::Reader::getOpen() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double Snapshot::Builder::getOpen() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setOpen(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double Snapshot::Reader::getHigh() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double Snapshot::Builder::getHigh() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setHigh(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double Snapshot::Reader::getLow() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double Snapshot::Builder::getLow() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setLow(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Snapshot::Reader::hasServerTime() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Snapshot::Builder::hasServerTime() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Snapshot::Reader::getServerTime() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Snapshot::Builder::getServerTime() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Snapshot::Builder::setServerTime( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Snapshot::Builder::initServerTime(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Snapshot::Builder::adoptServerTime(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Snapshot::Builder::disownServerTime() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::int64_t Snapshot::Reader::getReversedBytes0() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getReversedBytes0() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setReversedBytes0( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getReversedBytes1() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getReversedBytes1() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setReversedBytes1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getVol() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getVol() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setVol( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getCurVol() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getCurVol() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setCurVol( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline double Snapshot::Reader::getAmount() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline double Snapshot::Builder::getAmount() {
  return _builder.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setAmount(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getSVol() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getSVol() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setSVol( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getBVol() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getBVol() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setBVol( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getIndexOpenAmount() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getIndexOpenAmount() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setIndexOpenAmount( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getStockOpenAmount() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getStockOpenAmount() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setStockOpenAmount( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getOpenVolume() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getOpenVolume() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setOpenVolume( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getCloseVolume() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getCloseVolume() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setCloseVolume( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getIndexUp() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getIndexUp() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setIndexUp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getIndexUpLimit() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getIndexUpLimit() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setIndexUpLimit( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getIndexDown() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getIndexDown() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setIndexDown( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getIndexDownLimit() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getIndexDownLimit() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setIndexDownLimit( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline double Snapshot::Reader::getBid1() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline double Snapshot::Builder::getBid1() {
  return _builder.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setBid1(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline double Snapshot::Reader::getAsk1() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline double Snapshot::Builder::getAsk1() {
  return _builder.getDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setAsk1(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getBidVol1() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getBidVol1() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setBidVol1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getAskVol1() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getAskVol1() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setAskVol1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline double Snapshot::Reader::getBid2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline double Snapshot::Builder::getBid2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setBid2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline double Snapshot::Reader::getAsk2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline double Snapshot::Builder::getAsk2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setAsk2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getBidVol2() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getBidVol2() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setBidVol2( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getAskVol2() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getAskVol2() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setAskVol2( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline double Snapshot::Reader::getBid3() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline double Snapshot::Builder::getBid3() {
  return _builder.getDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setBid3(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline double Snapshot::Reader::getAsk3() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline double Snapshot::Builder::getAsk3() {
  return _builder.getDataField<double>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setAsk3(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getBidVol3() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getBidVol3() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setBidVol3( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getAskVol3() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getAskVol3() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setAskVol3( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline double Snapshot::Reader::getBid4() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline double Snapshot::Builder::getBid4() {
  return _builder.getDataField<double>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setBid4(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline double Snapshot::Reader::getAsk4() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline double Snapshot::Builder::getAsk4() {
  return _builder.getDataField<double>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setAsk4(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getBidVol4() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getBidVol4() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setBidVol4( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getAskVol4() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getAskVol4() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setAskVol4( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS, value);
}

inline double Snapshot::Reader::getBid5() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}

inline double Snapshot::Builder::getBid5() {
  return _builder.getDataField<double>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setBid5(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS, value);
}

inline double Snapshot::Reader::getAsk5() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS);
}

inline double Snapshot::Builder::getAsk5() {
  return _builder.getDataField<double>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setAsk5(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getBidVol5() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getBidVol5() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setBidVol5( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getAskVol5() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getAskVol5() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setAskVol5( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Snapshot::Reader::getReversedBytes4() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<164>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Snapshot::Builder::getReversedBytes4() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<164>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setReversedBytes4( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<164>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getReversedBytes5() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getReversedBytes5() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setReversedBytes5( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getReversedBytes6() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getReversedBytes6() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setReversedBytes6( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getReversedBytes7() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getReversedBytes7() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setReversedBytes7( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Snapshot::Reader::getReversedBytes8() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Snapshot::Builder::getReversedBytes8() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setReversedBytes8( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS, value);
}

inline double Snapshot::Reader::getRate() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS);
}

inline double Snapshot::Builder::getRate() {
  return _builder.getDataField<double>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setRate(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Snapshot::Reader::getActive2() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<165>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Snapshot::Builder::getActive2() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<165>() * ::capnp::ELEMENTS);
}
inline void Snapshot::Builder::setActive2( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<165>() * ::capnp::ELEMENTS, value);
}

inline bool Snapshot::Reader::hasTimeStamp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Snapshot::Builder::hasTimeStamp() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Snapshot::Reader::getTimeStamp() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Snapshot::Builder::getTimeStamp() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Snapshot::Builder::setTimeStamp( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Snapshot::Builder::initTimeStamp(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Snapshot::Builder::adoptTimeStamp(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Snapshot::Builder::disownTimeStamp() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool QuoteList::Reader::hasSnapshots() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QuoteList::Builder::hasSnapshots() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Snapshot,  ::capnp::Kind::STRUCT>::Reader QuoteList::Reader::getSnapshots() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Snapshot,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Snapshot,  ::capnp::Kind::STRUCT>::Builder QuoteList::Builder::getSnapshots() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Snapshot,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QuoteList::Builder::setSnapshots( ::capnp::List< ::Snapshot,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Snapshot,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Snapshot,  ::capnp::Kind::STRUCT>::Builder QuoteList::Builder::initSnapshots(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Snapshot,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void QuoteList::Builder::adoptSnapshots(
    ::capnp::Orphan< ::capnp::List< ::Snapshot,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Snapshot,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Snapshot,  ::capnp::Kind::STRUCT>> QuoteList::Builder::disownSnapshots() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Snapshot,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}


CAPNP_END_HEADER

