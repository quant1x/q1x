// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trans.proto

#include "trans.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace datasets {
PROTOBUF_CONSTEXPR TickTransaction::TickTransaction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.price_)*/0
  , /*decltype(_impl_.vol_)*/int64_t{0}
  , /*decltype(_impl_.num_)*/int64_t{0}
  , /*decltype(_impl_.amount_)*/0
  , /*decltype(_impl_.buy_or_sell_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TickTransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TickTransactionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TickTransactionDefaultTypeInternal() {}
  union {
    TickTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TickTransactionDefaultTypeInternal _TickTransaction_default_instance_;
}  // namespace datasets
static ::_pb::Metadata file_level_metadata_trans_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_trans_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_trans_2eproto = nullptr;

const uint32_t TableStruct_trans_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datasets::TickTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datasets::TickTransaction, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::datasets::TickTransaction, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::datasets::TickTransaction, _impl_.vol_),
  PROTOBUF_FIELD_OFFSET(::datasets::TickTransaction, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::datasets::TickTransaction, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::datasets::TickTransaction, _impl_.buy_or_sell_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::datasets::TickTransaction)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::datasets::_TickTransaction_default_instance_._instance,
};

const char descriptor_table_protodef_trans_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013trans.proto\022\010datasets\"m\n\017TickTransacti"
  "on\022\014\n\004time\030\001 \001(\t\022\r\n\005price\030\002 \001(\001\022\013\n\003vol\030\003"
  " \001(\003\022\013\n\003num\030\004 \001(\003\022\016\n\006amount\030\005 \001(\001\022\023\n\013buy"
  "_or_sell\030\006 \001(\003b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_trans_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_trans_2eproto = {
    false, false, 142, descriptor_table_protodef_trans_2eproto,
    "trans.proto",
    &descriptor_table_trans_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_trans_2eproto::offsets,
    file_level_metadata_trans_2eproto, file_level_enum_descriptors_trans_2eproto,
    file_level_service_descriptors_trans_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_trans_2eproto_getter() {
  return &descriptor_table_trans_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_trans_2eproto(&descriptor_table_trans_2eproto);
namespace datasets {

// ===================================================================

class TickTransaction::_Internal {
 public:
};

TickTransaction::TickTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:datasets.TickTransaction)
}
TickTransaction::TickTransaction(const TickTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TickTransaction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){}
    , decltype(_impl_.price_){}
    , decltype(_impl_.vol_){}
    , decltype(_impl_.num_){}
    , decltype(_impl_.amount_){}
    , decltype(_impl_.buy_or_sell_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time().empty()) {
    _this->_impl_.time_.Set(from._internal_time(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.price_, &from._impl_.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.buy_or_sell_) -
    reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.buy_or_sell_));
  // @@protoc_insertion_point(copy_constructor:datasets.TickTransaction)
}

inline void TickTransaction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){}
    , decltype(_impl_.price_){0}
    , decltype(_impl_.vol_){int64_t{0}}
    , decltype(_impl_.num_){int64_t{0}}
    , decltype(_impl_.amount_){0}
    , decltype(_impl_.buy_or_sell_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TickTransaction::~TickTransaction() {
  // @@protoc_insertion_point(destructor:datasets.TickTransaction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TickTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.time_.Destroy();
}

void TickTransaction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TickTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:datasets.TickTransaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_.ClearToEmpty();
  ::memset(&_impl_.price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.buy_or_sell_) -
      reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.buy_or_sell_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TickTransaction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "datasets.TickTransaction.time"));
        } else
          goto handle_unusual;
        continue;
      // double price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 vol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.vol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 buy_or_sell = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.buy_or_sell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TickTransaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datasets.TickTransaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string time = 1;
  if (!this->_internal_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "datasets.TickTransaction.time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_time(), target);
  }

  // double price = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_price(), target);
  }

  // int64 vol = 3;
  if (this->_internal_vol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_vol(), target);
  }

  // int64 num = 4;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_num(), target);
  }

  // double amount = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = this->_internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_amount(), target);
  }

  // int64 buy_or_sell = 6;
  if (this->_internal_buy_or_sell() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_buy_or_sell(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datasets.TickTransaction)
  return target;
}

size_t TickTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datasets.TickTransaction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string time = 1;
  if (!this->_internal_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  // double price = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    total_size += 1 + 8;
  }

  // int64 vol = 3;
  if (this->_internal_vol() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_vol());
  }

  // int64 num = 4;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num());
  }

  // double amount = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = this->_internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    total_size += 1 + 8;
  }

  // int64 buy_or_sell = 6;
  if (this->_internal_buy_or_sell() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_buy_or_sell());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TickTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TickTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TickTransaction::GetClassData() const { return &_class_data_; }


void TickTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TickTransaction*>(&to_msg);
  auto& from = static_cast<const TickTransaction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:datasets.TickTransaction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_time().empty()) {
    _this->_internal_set_time(from._internal_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = from._internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_vol() != 0) {
    _this->_internal_set_vol(from._internal_vol());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = from._internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (from._internal_buy_or_sell() != 0) {
    _this->_internal_set_buy_or_sell(from._internal_buy_or_sell());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TickTransaction::CopyFrom(const TickTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datasets.TickTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TickTransaction::IsInitialized() const {
  return true;
}

void TickTransaction::InternalSwap(TickTransaction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.time_, lhs_arena,
      &other->_impl_.time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TickTransaction, _impl_.buy_or_sell_)
      + sizeof(TickTransaction::_impl_.buy_or_sell_)
      - PROTOBUF_FIELD_OFFSET(TickTransaction, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TickTransaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trans_2eproto_getter, &descriptor_table_trans_2eproto_once,
      file_level_metadata_trans_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace datasets
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::datasets::TickTransaction*
Arena::CreateMaybeMessage< ::datasets::TickTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datasets::TickTransaction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
