// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/xdxr.proto

#include "xdxr.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace xdxr {
PROTOBUF_CONSTEXPR factor::factor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.m_)*/0
  , /*decltype(_impl_.a_)*/0
  , /*decltype(_impl_.number_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct factorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR factorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~factorDefaultTypeInternal() {}
  union {
    factor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 factorDefaultTypeInternal _factor_default_instance_;
PROTOBUF_CONSTEXPR factor_list::factor_list(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct factor_listDefaultTypeInternal {
  PROTOBUF_CONSTEXPR factor_listDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~factor_listDefaultTypeInternal() {}
  union {
    factor_list _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 factor_listDefaultTypeInternal _factor_list_default_instance_;
PROTOBUF_CONSTEXPR adjust_map_ComplexMapEntry_DoNotUse::adjust_map_ComplexMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct adjust_map_ComplexMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR adjust_map_ComplexMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~adjust_map_ComplexMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    adjust_map_ComplexMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 adjust_map_ComplexMapEntry_DoNotUseDefaultTypeInternal _adjust_map_ComplexMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR adjust_map::adjust_map(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.complex_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct adjust_mapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR adjust_mapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~adjust_mapDefaultTypeInternal() {}
  union {
    adjust_map _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 adjust_mapDefaultTypeInternal _adjust_map_default_instance_;
}  // namespace xdxr
static ::_pb::Metadata file_level_metadata_proto_2fxdxr_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proto_2fxdxr_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2fxdxr_2eproto = nullptr;

const uint32_t TableStruct_proto_2fxdxr_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xdxr::factor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xdxr::factor, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::xdxr::factor, _impl_.m_),
  PROTOBUF_FIELD_OFFSET(::xdxr::factor, _impl_.a_),
  PROTOBUF_FIELD_OFFSET(::xdxr::factor, _impl_.number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xdxr::factor_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xdxr::factor_list, _impl_.values_),
  PROTOBUF_FIELD_OFFSET(::xdxr::adjust_map_ComplexMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xdxr::adjust_map_ComplexMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xdxr::adjust_map_ComplexMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xdxr::adjust_map_ComplexMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xdxr::adjust_map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xdxr::adjust_map, _impl_.complex_map_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::xdxr::factor)},
  { 10, -1, -1, sizeof(::xdxr::factor_list)},
  { 17, 25, -1, sizeof(::xdxr::adjust_map_ComplexMapEntry_DoNotUse)},
  { 27, -1, -1, sizeof(::xdxr::adjust_map)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::xdxr::_factor_default_instance_._instance,
  &::xdxr::_factor_list_default_instance_._instance,
  &::xdxr::_adjust_map_ComplexMapEntry_DoNotUse_default_instance_._instance,
  &::xdxr::_adjust_map_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2fxdxr_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020proto/xdxr.proto\022\004xdxr\"A\n\006factor\022\021\n\tti"
  "mestamp\030\001 \001(\003\022\t\n\001m\030\002 \001(\001\022\t\n\001a\030\003 \001(\001\022\016\n\006n"
  "umber\030\004 \001(\005\"+\n\013factor_list\022\034\n\006values\030\001 \003"
  "(\0132\014.xdxr.factor\"\211\001\n\nadjust_map\0225\n\013compl"
  "ex_map\030\001 \003(\0132 .xdxr.adjust_map.ComplexMa"
  "pEntry\032D\n\017ComplexMapEntry\022\013\n\003key\030\001 \001(\t\022 "
  "\n\005value\030\002 \001(\0132\021.xdxr.factor_list:\0028\001b\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_proto_2fxdxr_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fxdxr_2eproto = {
    false, false, 284, descriptor_table_protodef_proto_2fxdxr_2eproto,
    "proto/xdxr.proto",
    &descriptor_table_proto_2fxdxr_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_proto_2fxdxr_2eproto::offsets,
    file_level_metadata_proto_2fxdxr_2eproto, file_level_enum_descriptors_proto_2fxdxr_2eproto,
    file_level_service_descriptors_proto_2fxdxr_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fxdxr_2eproto_getter() {
  return &descriptor_table_proto_2fxdxr_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fxdxr_2eproto(&descriptor_table_proto_2fxdxr_2eproto);
namespace xdxr {

// ===================================================================

class factor::_Internal {
 public:
};

factor::factor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xdxr.factor)
}
factor::factor(const factor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  factor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){}
    , decltype(_impl_.m_){}
    , decltype(_impl_.a_){}
    , decltype(_impl_.number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.number_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.number_));
  // @@protoc_insertion_point(copy_constructor:xdxr.factor)
}

inline void factor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.m_){0}
    , decltype(_impl_.a_){0}
    , decltype(_impl_.number_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

factor::~factor() {
  // @@protoc_insertion_point(destructor:xdxr.factor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void factor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void factor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void factor::Clear() {
// @@protoc_insertion_point(message_clear_start:xdxr.factor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.number_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* factor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* factor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xdxr.factor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // double m = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_m = this->_internal_m();
  uint64_t raw_m;
  memcpy(&raw_m, &tmp_m, sizeof(tmp_m));
  if (raw_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_m(), target);
  }

  // double a = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a = this->_internal_a();
  uint64_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_a(), target);
  }

  // int32 number = 4;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xdxr.factor)
  return target;
}

size_t factor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xdxr.factor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // double m = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_m = this->_internal_m();
  uint64_t raw_m;
  memcpy(&raw_m, &tmp_m, sizeof(tmp_m));
  if (raw_m != 0) {
    total_size += 1 + 8;
  }

  // double a = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a = this->_internal_a();
  uint64_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    total_size += 1 + 8;
  }

  // int32 number = 4;
  if (this->_internal_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData factor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    factor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*factor::GetClassData() const { return &_class_data_; }


void factor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<factor*>(&to_msg);
  auto& from = static_cast<const factor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xdxr.factor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_m = from._internal_m();
  uint64_t raw_m;
  memcpy(&raw_m, &tmp_m, sizeof(tmp_m));
  if (raw_m != 0) {
    _this->_internal_set_m(from._internal_m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a = from._internal_a();
  uint64_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    _this->_internal_set_a(from._internal_a());
  }
  if (from._internal_number() != 0) {
    _this->_internal_set_number(from._internal_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void factor::CopyFrom(const factor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xdxr.factor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool factor::IsInitialized() const {
  return true;
}

void factor::InternalSwap(factor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(factor, _impl_.number_)
      + sizeof(factor::_impl_.number_)
      - PROTOBUF_FIELD_OFFSET(factor, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata factor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fxdxr_2eproto_getter, &descriptor_table_proto_2fxdxr_2eproto_once,
      file_level_metadata_proto_2fxdxr_2eproto[0]);
}

// ===================================================================

class factor_list::_Internal {
 public:
};

factor_list::factor_list(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:xdxr.factor_list)
}
factor_list::factor_list(const factor_list& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  factor_list* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xdxr.factor_list)
}

inline void factor_list::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

factor_list::~factor_list() {
  // @@protoc_insertion_point(destructor:xdxr.factor_list)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void factor_list::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
}

void factor_list::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void factor_list::Clear() {
// @@protoc_insertion_point(message_clear_start:xdxr.factor_list)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* factor_list::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .xdxr.factor values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* factor_list::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xdxr.factor_list)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xdxr.factor values = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xdxr.factor_list)
  return target;
}

size_t factor_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xdxr.factor_list)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xdxr.factor values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_impl_.values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData factor_list::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    factor_list::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*factor_list::GetClassData() const { return &_class_data_; }


void factor_list::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<factor_list*>(&to_msg);
  auto& from = static_cast<const factor_list&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xdxr.factor_list)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void factor_list::CopyFrom(const factor_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xdxr.factor_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool factor_list::IsInitialized() const {
  return true;
}

void factor_list::InternalSwap(factor_list* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata factor_list::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fxdxr_2eproto_getter, &descriptor_table_proto_2fxdxr_2eproto_once,
      file_level_metadata_proto_2fxdxr_2eproto[1]);
}

// ===================================================================

adjust_map_ComplexMapEntry_DoNotUse::adjust_map_ComplexMapEntry_DoNotUse() {}
adjust_map_ComplexMapEntry_DoNotUse::adjust_map_ComplexMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void adjust_map_ComplexMapEntry_DoNotUse::MergeFrom(const adjust_map_ComplexMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata adjust_map_ComplexMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fxdxr_2eproto_getter, &descriptor_table_proto_2fxdxr_2eproto_once,
      file_level_metadata_proto_2fxdxr_2eproto[2]);
}

// ===================================================================

class adjust_map::_Internal {
 public:
};

adjust_map::adjust_map(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &adjust_map::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:xdxr.adjust_map)
}
adjust_map::adjust_map(const adjust_map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  adjust_map* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.complex_map_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.complex_map_.MergeFrom(from._impl_.complex_map_);
  // @@protoc_insertion_point(copy_constructor:xdxr.adjust_map)
}

inline void adjust_map::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.complex_map_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

adjust_map::~adjust_map() {
  // @@protoc_insertion_point(destructor:xdxr.adjust_map)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void adjust_map::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.complex_map_.Destruct();
  _impl_.complex_map_.~MapField();
}

void adjust_map::ArenaDtor(void* object) {
  adjust_map* _this = reinterpret_cast< adjust_map* >(object);
  _this->_impl_.complex_map_.Destruct();
}
void adjust_map::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void adjust_map::Clear() {
// @@protoc_insertion_point(message_clear_start:xdxr.adjust_map)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.complex_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* adjust_map::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .xdxr.factor_list> complex_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.complex_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* adjust_map::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xdxr.adjust_map)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .xdxr.factor_list> complex_map = 1;
  if (!this->_internal_complex_map().empty()) {
    using MapType = ::_pb::Map<std::string, ::xdxr::factor_list>;
    using WireHelper = adjust_map_ComplexMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_complex_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "xdxr.adjust_map.ComplexMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xdxr.adjust_map)
  return target;
}

size_t adjust_map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xdxr.adjust_map)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .xdxr.factor_list> complex_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_complex_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xdxr::factor_list >::const_iterator
      it = this->_internal_complex_map().begin();
      it != this->_internal_complex_map().end(); ++it) {
    total_size += adjust_map_ComplexMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData adjust_map::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    adjust_map::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*adjust_map::GetClassData() const { return &_class_data_; }


void adjust_map::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<adjust_map*>(&to_msg);
  auto& from = static_cast<const adjust_map&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xdxr.adjust_map)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.complex_map_.MergeFrom(from._impl_.complex_map_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void adjust_map::CopyFrom(const adjust_map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xdxr.adjust_map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool adjust_map::IsInitialized() const {
  return true;
}

void adjust_map::InternalSwap(adjust_map* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.complex_map_.InternalSwap(&other->_impl_.complex_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata adjust_map::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fxdxr_2eproto_getter, &descriptor_table_proto_2fxdxr_2eproto_once,
      file_level_metadata_proto_2fxdxr_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace xdxr
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xdxr::factor*
Arena::CreateMaybeMessage< ::xdxr::factor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xdxr::factor >(arena);
}
template<> PROTOBUF_NOINLINE ::xdxr::factor_list*
Arena::CreateMaybeMessage< ::xdxr::factor_list >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xdxr::factor_list >(arena);
}
template<> PROTOBUF_NOINLINE ::xdxr::adjust_map_ComplexMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::xdxr::adjust_map_ComplexMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xdxr::adjust_map_ComplexMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xdxr::adjust_map*
Arena::CreateMaybeMessage< ::xdxr::adjust_map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xdxr::adjust_map >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
