// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/xdxr.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fxdxr_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fxdxr_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fxdxr_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fxdxr_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fxdxr_2eproto;
namespace xdxr {
class adjust_map;
struct adjust_mapDefaultTypeInternal;
extern adjust_mapDefaultTypeInternal _adjust_map_default_instance_;
class adjust_map_ComplexMapEntry_DoNotUse;
struct adjust_map_ComplexMapEntry_DoNotUseDefaultTypeInternal;
extern adjust_map_ComplexMapEntry_DoNotUseDefaultTypeInternal _adjust_map_ComplexMapEntry_DoNotUse_default_instance_;
class factor;
struct factorDefaultTypeInternal;
extern factorDefaultTypeInternal _factor_default_instance_;
class factor_list;
struct factor_listDefaultTypeInternal;
extern factor_listDefaultTypeInternal _factor_list_default_instance_;
}  // namespace xdxr
PROTOBUF_NAMESPACE_OPEN
template<> ::xdxr::adjust_map* Arena::CreateMaybeMessage<::xdxr::adjust_map>(Arena*);
template<> ::xdxr::adjust_map_ComplexMapEntry_DoNotUse* Arena::CreateMaybeMessage<::xdxr::adjust_map_ComplexMapEntry_DoNotUse>(Arena*);
template<> ::xdxr::factor* Arena::CreateMaybeMessage<::xdxr::factor>(Arena*);
template<> ::xdxr::factor_list* Arena::CreateMaybeMessage<::xdxr::factor_list>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xdxr {

// ===================================================================

class factor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xdxr.factor) */ {
 public:
  inline factor() : factor(nullptr) {}
  ~factor() override;
  explicit PROTOBUF_CONSTEXPR factor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  factor(const factor& from);
  factor(factor&& from) noexcept
    : factor() {
    *this = ::std::move(from);
  }

  inline factor& operator=(const factor& from) {
    CopyFrom(from);
    return *this;
  }
  inline factor& operator=(factor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const factor& default_instance() {
    return *internal_default_instance();
  }
  static inline const factor* internal_default_instance() {
    return reinterpret_cast<const factor*>(
               &_factor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(factor& a, factor& b) {
    a.Swap(&b);
  }
  inline void Swap(factor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(factor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  factor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<factor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const factor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const factor& from) {
    factor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(factor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xdxr.factor";
  }
  protected:
  explicit factor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kMFieldNumber = 2,
    kAFieldNumber = 3,
    kNumberFieldNumber = 4,
  };
  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // double m = 2;
  void clear_m();
  double m() const;
  void set_m(double value);
  private:
  double _internal_m() const;
  void _internal_set_m(double value);
  public:

  // double a = 3;
  void clear_a();
  double a() const;
  void set_a(double value);
  private:
  double _internal_a() const;
  void _internal_set_a(double value);
  public:

  // int32 number = 4;
  void clear_number();
  int32_t number() const;
  void set_number(int32_t value);
  private:
  int32_t _internal_number() const;
  void _internal_set_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:xdxr.factor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t timestamp_;
    double m_;
    double a_;
    int32_t number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fxdxr_2eproto;
};
// -------------------------------------------------------------------

class factor_list final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xdxr.factor_list) */ {
 public:
  inline factor_list() : factor_list(nullptr) {}
  ~factor_list() override;
  explicit PROTOBUF_CONSTEXPR factor_list(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  factor_list(const factor_list& from);
  factor_list(factor_list&& from) noexcept
    : factor_list() {
    *this = ::std::move(from);
  }

  inline factor_list& operator=(const factor_list& from) {
    CopyFrom(from);
    return *this;
  }
  inline factor_list& operator=(factor_list&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const factor_list& default_instance() {
    return *internal_default_instance();
  }
  static inline const factor_list* internal_default_instance() {
    return reinterpret_cast<const factor_list*>(
               &_factor_list_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(factor_list& a, factor_list& b) {
    a.Swap(&b);
  }
  inline void Swap(factor_list* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(factor_list* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  factor_list* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<factor_list>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const factor_list& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const factor_list& from) {
    factor_list::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(factor_list* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xdxr.factor_list";
  }
  protected:
  explicit factor_list(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .xdxr.factor values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::xdxr::factor* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xdxr::factor >*
      mutable_values();
  private:
  const ::xdxr::factor& _internal_values(int index) const;
  ::xdxr::factor* _internal_add_values();
  public:
  const ::xdxr::factor& values(int index) const;
  ::xdxr::factor* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xdxr::factor >&
      values() const;

  // @@protoc_insertion_point(class_scope:xdxr.factor_list)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xdxr::factor > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fxdxr_2eproto;
};
// -------------------------------------------------------------------

class adjust_map_ComplexMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<adjust_map_ComplexMapEntry_DoNotUse, 
    std::string, ::xdxr::factor_list,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<adjust_map_ComplexMapEntry_DoNotUse, 
    std::string, ::xdxr::factor_list,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  adjust_map_ComplexMapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR adjust_map_ComplexMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit adjust_map_ComplexMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const adjust_map_ComplexMapEntry_DoNotUse& other);
  static const adjust_map_ComplexMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const adjust_map_ComplexMapEntry_DoNotUse*>(&_adjust_map_ComplexMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "xdxr.adjust_map.ComplexMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_proto_2fxdxr_2eproto;
};

// -------------------------------------------------------------------

class adjust_map final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xdxr.adjust_map) */ {
 public:
  inline adjust_map() : adjust_map(nullptr) {}
  ~adjust_map() override;
  explicit PROTOBUF_CONSTEXPR adjust_map(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  adjust_map(const adjust_map& from);
  adjust_map(adjust_map&& from) noexcept
    : adjust_map() {
    *this = ::std::move(from);
  }

  inline adjust_map& operator=(const adjust_map& from) {
    CopyFrom(from);
    return *this;
  }
  inline adjust_map& operator=(adjust_map&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const adjust_map& default_instance() {
    return *internal_default_instance();
  }
  static inline const adjust_map* internal_default_instance() {
    return reinterpret_cast<const adjust_map*>(
               &_adjust_map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(adjust_map& a, adjust_map& b) {
    a.Swap(&b);
  }
  inline void Swap(adjust_map* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(adjust_map* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  adjust_map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<adjust_map>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const adjust_map& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const adjust_map& from) {
    adjust_map::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(adjust_map* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xdxr.adjust_map";
  }
  protected:
  explicit adjust_map(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kComplexMapFieldNumber = 1,
  };
  // map<string, .xdxr.factor_list> complex_map = 1;
  int complex_map_size() const;
  private:
  int _internal_complex_map_size() const;
  public:
  void clear_complex_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xdxr::factor_list >&
      _internal_complex_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xdxr::factor_list >*
      _internal_mutable_complex_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xdxr::factor_list >&
      complex_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xdxr::factor_list >*
      mutable_complex_map();

  // @@protoc_insertion_point(class_scope:xdxr.adjust_map)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        adjust_map_ComplexMapEntry_DoNotUse,
        std::string, ::xdxr::factor_list,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> complex_map_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fxdxr_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// factor

// int64 timestamp = 1;
inline void factor::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t factor::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t factor::timestamp() const {
  // @@protoc_insertion_point(field_get:xdxr.factor.timestamp)
  return _internal_timestamp();
}
inline void factor::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void factor::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:xdxr.factor.timestamp)
}

// double m = 2;
inline void factor::clear_m() {
  _impl_.m_ = 0;
}
inline double factor::_internal_m() const {
  return _impl_.m_;
}
inline double factor::m() const {
  // @@protoc_insertion_point(field_get:xdxr.factor.m)
  return _internal_m();
}
inline void factor::_internal_set_m(double value) {
  
  _impl_.m_ = value;
}
inline void factor::set_m(double value) {
  _internal_set_m(value);
  // @@protoc_insertion_point(field_set:xdxr.factor.m)
}

// double a = 3;
inline void factor::clear_a() {
  _impl_.a_ = 0;
}
inline double factor::_internal_a() const {
  return _impl_.a_;
}
inline double factor::a() const {
  // @@protoc_insertion_point(field_get:xdxr.factor.a)
  return _internal_a();
}
inline void factor::_internal_set_a(double value) {
  
  _impl_.a_ = value;
}
inline void factor::set_a(double value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:xdxr.factor.a)
}

// int32 number = 4;
inline void factor::clear_number() {
  _impl_.number_ = 0;
}
inline int32_t factor::_internal_number() const {
  return _impl_.number_;
}
inline int32_t factor::number() const {
  // @@protoc_insertion_point(field_get:xdxr.factor.number)
  return _internal_number();
}
inline void factor::_internal_set_number(int32_t value) {
  
  _impl_.number_ = value;
}
inline void factor::set_number(int32_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:xdxr.factor.number)
}

// -------------------------------------------------------------------

// factor_list

// repeated .xdxr.factor values = 1;
inline int factor_list::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int factor_list::values_size() const {
  return _internal_values_size();
}
inline void factor_list::clear_values() {
  _impl_.values_.Clear();
}
inline ::xdxr::factor* factor_list::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:xdxr.factor_list.values)
  return _impl_.values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xdxr::factor >*
factor_list::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:xdxr.factor_list.values)
  return &_impl_.values_;
}
inline const ::xdxr::factor& factor_list::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline const ::xdxr::factor& factor_list::values(int index) const {
  // @@protoc_insertion_point(field_get:xdxr.factor_list.values)
  return _internal_values(index);
}
inline ::xdxr::factor* factor_list::_internal_add_values() {
  return _impl_.values_.Add();
}
inline ::xdxr::factor* factor_list::add_values() {
  ::xdxr::factor* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:xdxr.factor_list.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xdxr::factor >&
factor_list::values() const {
  // @@protoc_insertion_point(field_list:xdxr.factor_list.values)
  return _impl_.values_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// adjust_map

// map<string, .xdxr.factor_list> complex_map = 1;
inline int adjust_map::_internal_complex_map_size() const {
  return _impl_.complex_map_.size();
}
inline int adjust_map::complex_map_size() const {
  return _internal_complex_map_size();
}
inline void adjust_map::clear_complex_map() {
  _impl_.complex_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xdxr::factor_list >&
adjust_map::_internal_complex_map() const {
  return _impl_.complex_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xdxr::factor_list >&
adjust_map::complex_map() const {
  // @@protoc_insertion_point(field_map:xdxr.adjust_map.complex_map)
  return _internal_complex_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xdxr::factor_list >*
adjust_map::_internal_mutable_complex_map() {
  return _impl_.complex_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xdxr::factor_list >*
adjust_map::mutable_complex_map() {
  // @@protoc_insertion_point(field_mutable_map:xdxr.adjust_map.complex_map)
  return _internal_mutable_complex_map();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xdxr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fxdxr_2eproto
