#include <q1x/level1/server.h>
#include <q1x/level1/hello1.h>
#include <q1x/level1/hello2.h>

namespace level1 {
    // 标准行情服务器列表
    const std::vector<Server> StandardServerList = {
        {"通达信", "深圳双线主站1", "110.41.147.114", 7709, 0},
        {"通达信", "深圳双线主站2", "110.41.2.72", 7709, 0},
        {"通达信", "深圳双线主站3", "110.41.4.4", 7709, 0},
        {"通达信", "深圳双线主站4", "47.113.94.204", 7709, 0},
        {"通达信", "深圳双线主站5", "8.129.174.169", 7709, 0},
        {"通达信", "深圳双线主站6", "110.41.154.219", 7709, 0},
        {"通达信", "上海双线主站1", "124.70.176.52", 7709, 0},
        {"通达信", "上海双线主站2", "47.100.236.28", 7709, 0},
        {"通达信", "上海双线主站3", "123.60.186.45", 7709, 0},
        {"通达信", "上海双线主站4", "123.60.164.122", 7709, 0},
        {"通达信", "上海双线主站5", "47.116.105.28", 7709, 0},
        {"通达信", "上海双线主站6", "124.70.199.56", 7709, 0},
        {"通达信", "北京双线主站1", "121.36.54.217", 7709, 0},
        {"通达信", "北京双线主站2", "121.36.81.195", 7709, 0},
        {"通达信", "北京双线主站3", "123.249.15.60", 7709, 0},
        {"通达信", "广州双线主站1", "124.71.85.110", 7709, 0},
        {"通达信", "广州双线主站2", "139.9.51.18", 7709, 0},
        {"通达信", "广州双线主站3", "139.159.239.163", 7709, 0},
        {"通达信", "上海双线主站7", "106.14.201.131", 7709, 0},
        {"通达信", "上海双线主站8", "106.14.190.242", 7709, 0},
        {"通达信", "上海双线主站9", "121.36.225.169", 7709, 0},
        {"通达信", "上海双线主站10", "123.60.70.228", 7709, 0},
        {"通达信", "上海双线主站11", "123.60.73.44", 7709, 0},
        {"通达信", "上海双线主站12", "124.70.133.119", 7709, 0},
        {"通达信", "上海双线主站13", "124.71.187.72", 7709, 0},
        {"通达信", "上海双线主站14", "124.71.187.122", 7709, 0},
        {"通达信", "武汉电信主站1", "119.97.185.59", 7709, 0},
        {"通达信", "深圳双线主站7", "47.107.64.168", 7709, 0},
        {"通达信", "北京双线主站4", "124.70.75.113", 7709, 0},
        {"通达信", "广州双线主站4", "124.71.9.153", 7709, 0},
        {"通达信", "上海双线主站15", "123.60.84.66", 7709, 0},
        {"通达信", "深圳双线主站8", "47.107.228.47", 7719, 0},
        {"通达信", "北京双线主站5", "120.46.186.223", 7709, 0},
        {"通达信", "北京双线主站6", "124.70.22.210", 7709, 0},
        {"通达信", "北京双线主站7", "139.9.133.247", 7709, 0},
        {"通达信", "广州双线主站5", "116.205.163.254", 7709, 0},
        {"通达信", "广州双线主站6", "116.205.171.132", 7709, 0},
        {"通达信", "广州双线主站7", "116.205.183.150", 7709, 0},
        {"中信证券", "上海电信主站Z1", "180.153.18.170", 7709, 0},
        {"中信证券", "上海电信主站Z2", "180.153.18.171", 7709, 0},
        {"中信证券", "北京联通主站Z1", "202.108.253.130", 7709, 0},
        {"中信证券", "北京联通主站Z2", "202.108.253.131", 7709, 0},
        {"中信证券", "杭州电信主站J1", "60.191.117.167", 7709, 0},
        {"中信证券", "杭州电信主站J2", "115.238.56.198", 7709, 0},
        {"中信证券", "杭州电信主站J3", "218.75.126.9", 7709, 0},
        {"中信证券", "杭州电信主站J4", "115.238.90.165", 7709, 0},
        {"中信证券", "杭州联通主站J1", "124.160.88.183", 7709, 0},
        {"中信证券", "杭州联通主站J2", "60.12.136.250", 7709, 0},
        {"中信证券", "杭州华数主站J1", "218.108.98.244", 7709, 0},
        {"中信证券", "杭州华数主站J2", "218.108.47.69", 7709, 0},
        {"中信证券", "济南联通主站W1", "27.221.115.131", 7709, 0},
        {"中信证券", "青岛电信主站W1", "58.56.180.60", 7709, 0},
        {"中信证券", "深圳电信主站Z1", "14.17.75.71", 7709, 0},
        {"中信证券", "云行情上海电信Z1", "114.80.63.12", 7709, 0},
        {"中信证券", "云行情上海电信Z2", "114.80.63.35", 7709, 0},
        {"中信证券", "上海电信主站Z3", "180.153.39.51", 7709, 0},
        {"中信证券", "云行情北京联通Z1", "123.125.108.23", 7709, 0},
        {"中信证券", "云行情北京联通Z2", "123.125.108.24", 7709, 0},
        {"中信证券", "云行情广州电信Z1", "121.201.83.106", 7709, 0},
        {"中信证券", "云行情成都电信Z1", "218.6.170.55", 7709, 0},
        //{"华泰证券", "华泰证券(智选一)", "tdxhq.htzq.com.cn", 7709, 0},
        //{"华泰证券", "华泰证券(智选二)", "tdxhq.htsc.com", 7709, 0},
        {"华泰证券", "华泰证券(南京电信一)", "180.101.48.170", 7709, 0},
        {"华泰证券", "华泰证券(南京电信二)", "180.101.48.171", 7709, 0},
        {"华泰证券", "华泰证券(南京移动一)", "120.195.71.155", 7709, 0},
        {"华泰证券", "华泰证券(南京移动二)", "120.195.71.156", 7709, 0},
        {"华泰证券", "华泰证券(南京联通一)", "122.96.107.242", 7709, 0},
        {"华泰证券", "华泰证券(南京联通二)", "122.96.107.243", 7709, 0},
        {"华泰证券", "华泰证券(亚马逊一)", "52.83.39.241", 7709, 0},
        {"华泰证券", "华泰证券(亚马逊二)", "52.83.199.101", 7709, 0},
        {"华泰证券", "华泰证券(华南阿里云一)", "8.135.57.58", 7709, 0},
        {"华泰证券", "华泰证券(华南阿里云二)", "8.135.62.177", 7709, 0},
        {"华泰证券", "华泰证券(华东华为云一)", "124.70.183.173", 7709, 0},
        {"华泰证券", "华泰证券(华东华为云二)", "124.71.163.106", 7709, 0},
        //{"国泰君安", "国泰君安深圳电信组站", "sztdx.gtjas.com", 7709, 0},
        //{"国泰君安", "国泰君安江苏电信组站", "jstdx.gtjas.com", 7709, 0},
        //{"国泰君安", "国泰君安上海电信组站", "shtdx.gtjas.com", 7709, 0},
        //{"国泰君安", "国泰君安北京网通组站", "bjwttdx.gtjas.com", 7709, 0},
        //{"国泰君安", "国泰君安北方网通组站", "bfwttdx.gtjas.com", 7709, 0},
        //{"国泰君安", "国泰君安河北网通组站", "hbwttdx.gtjas.com", 7709, 0},
        //{"国泰君安", "国泰君安成都电信组站", "cdtdx.gtjas.com", 7709, 0},
        {"国泰君安", "郑州网通行情一", "182.118.47.141", 7709, 0},
        {"国泰君安", "郑州网通行情二", "182.118.47.168", 7709, 0},
        {"国泰君安", "郑州网通行情三", "182.118.47.169", 7709, 0},
        {"国泰君安", "武汉电信行情一", "119.97.164.184", 7709, 0},
        {"国泰君安", "武汉电信行情二", "119.97.164.189", 7709, 0},
        {"国泰君安", "武汉电信行情三", "116.211.121.102", 7709, 0},
        {"国泰君安", "武汉电信行情四", "116.211.121.108", 7709, 0},
        {"国泰君安", "武汉电信行情五", "116.211.121.31", 7709, 0},
        {"国泰君安", "新疆电信云行情一", "202.100.166.117", 7709, 0},
        {"国泰君安", "新疆电信云行情二", "202.100.166.118", 7709, 0},
        {"国泰君安", "上海电信行情八", "222.73.139.166", 7709, 0},
        {"国泰君安", "上海电信行情九", "222.73.139.167", 7709, 0},
        {"国泰君安", "上海电信行情十", "222.73.139.168", 7709, 0},
        {"国泰君安", "上海BGP行情一", "103.251.85.90", 7709, 0},
        {"国泰君安", "北京联通行情一", "123.125.108.213", 7709, 0},
        {"国泰君安", "北京联通行情二", "123.125.108.214", 7709, 0},
        {"国泰君安", "上海电信行情六", "222.73.139.151", 7709, 0},
        {"国泰君安", "上海电信行情七", "222.73.139.152", 7709, 0},
        {"国泰君安", "成都BGP行情一", "148.70.110.41", 7709, 0},
        {"国泰君安", "成都BGP行情二", "148.70.93.117", 7709, 0},
        {"国泰君安", "成都BGP行情三", "148.70.31.16", 7709, 0},
        {"国泰君安", "成都BGP行情四", "148.70.111.63", 7709, 0},
        {"国泰君安", "广州BGP行情一", "139.159.143.228", 7709, 0},
        {"国泰君安", "广州BGP行情二", "139.159.183.76", 7709, 0},
        {"国泰君安", "广州BGP行情三", "139.159.193.118", 7709, 0},
        {"国泰君安", "广州BGP行情四", "139.159.195.177", 7709, 0},
        {"国泰君安", "广州BGP行情五", "139.159.202.253", 7709, 0},
        {"国泰君安", "广州BGP行情六", "139.159.214.78", 7709, 0},
        {"国泰君安", "广州BGP行情七", "139.9.38.206", 7709, 0},
        {"国泰君安", "广州BGP行情八", "139.9.43.104", 7709, 0},
        {"国泰君安", "广州BGP行情九", "139.9.43.31", 7709, 0},
        {"国泰君安", "广州BGP行情十", "139.9.50.246", 7709, 0},
        {"国泰君安", "广州BGP行情十一", "139.9.52.158", 7709, 0},
        {"国泰君安", "广州BGP行情十二", "139.9.90.169", 7709, 0},
        {"国泰君安", "上海电信行情十一", "101.226.180.73", 7709, 0},
        {"国泰君安", "上海电信行情十二", "101.226.180.74", 7709, 0},
        {"国泰君安", "上海BGP行情六", "103.251.85.200", 7709, 0},
        {"国泰君安", "上海BGP行情七", "103.251.85.201", 7709, 0},
        {"国泰君安", "南京电信行情一", "103.221.142.65", 7709, 0},
        {"国泰君安", "南京电信行情二", "103.221.142.66", 7709, 0},
        {"国泰君安", "南京电信行情三", "103.221.142.67", 7709, 0},
        {"国泰君安", "南京电信行情四", "103.221.142.68", 7709, 0},
        {"国泰君安", "南京电信行情五", "103.221.142.69", 7709, 0},
        {"国泰君安", "南京电信行情六", "103.221.142.70", 7709, 0},
        {"国泰君安", "南京电信行情七", "103.221.142.71", 7709, 0},
        {"国泰君安", "南京电信行情八", "103.221.142.72", 7709, 0},
        {"国泰君安", "西安电信行情一", "117.34.114.13", 7709, 0},
        {"国泰君安", "西安电信行情二", "117.34.114.14", 7709, 0},
        {"国泰君安", "西安电信行情三", "117.34.114.15", 7709, 0},
        {"国泰君安", "西安电信行情四", "117.34.114.16", 7709, 0},
        {"国泰君安", "西安电信行情五", "117.34.114.17", 7709, 0},
        {"国泰君安", "西安电信行情六", "117.34.114.18", 7709, 0},
        {"国泰君安", "西安电信行情七", "117.34.114.20", 7709, 0},
        {"国泰君安", "西安电信行情八", "117.34.114.27", 7709, 0},
        {"国泰君安", "西安电信行情九", "117.34.114.30", 7709, 0},
        {"国泰君安", "上海BGP行情八", "103.251.85.202", 7709, 0},
        {"国泰君安", "东莞电信行情一", "183.60.224.142", 7709, 0},
        {"国泰君安", "东莞电信行情二", "183.60.224.143", 7709, 0},
        {"国泰君安", "东莞电信行情三", "183.60.224.144", 7709, 0},
        {"国泰君安", "东莞电信行情四", "183.60.224.145", 7709, 0},
        {"国泰君安", "东莞电信行情五", "183.60.224.146", 7709, 0},
        {"国泰君安", "东莞电信行情六", "183.60.224.147", 7709, 0},
        {"国泰君安", "东莞电信行情七", "183.60.224.148", 7709, 0}
    };

    // 扩展行情服务器列表
    const std::vector<Server> ExtensionServerList = {
        {"通达信", "扩展市场深圳双线1", "112.74.214.43", 7727, 0},
        {"通达信", "扩展市场深圳双线2", "120.25.218.6", 7727, 0},
        {"通达信", "扩展市场深圳双线3", "47.107.75.159", 7727, 0},
        {"通达信", "扩展市场深圳双线4", "47.106.204.218", 7727, 0},
        {"通达信", "扩展市场深圳双线5", "47.106.209.131", 7727, 0},
        {"通达信", "扩展市场武汉主站1", "119.97.185.5", 7727, 0},
        {"通达信", "扩展市场深圳双线6", "47.115.94.72", 7727, 0},
        {"通达信", "扩展市场上海双线1", "106.14.95.149", 7727, 0},
        {"通达信", "扩展市场上海双线2", "47.102.108.214", 7727, 0},
        {"通达信", "扩展市场上海双线3", "47.103.86.229", 7727, 0},
        {"通达信", "扩展市场上海双线4", "47.103.88.146", 7727, 0},
        {"通达信", "扩展市场广州双线1", "116.205.143.214", 7727, 0},
        {"通达信", "扩展市场广州双线2", "124.71.223.19", 7727, 0},
        {"中信证券", "上海电信主站Z1", "180.153.18.176", 7721, 0},
        {"中信证券", "北京联通主站Z1", "202.108.253.154", 7721, 0},
        {"中信证券", "杭州电信主站J1", "115.238.56.196", 7721, 0},
        {"中信证券", "杭州电信主站J2", "115.238.90.170", 7721, 0},
        {"中信证券", "杭州联通主站J1", "60.12.136.251", 7721, 0},
        {"中信证券", "杭州华数主站J1", "218.108.98.244", 7721, 0},
        {"中信证券", "济南联通主站W1", "27.221.115.133", 7721, 0},
        {"中信证券", "青岛电信主站W1", "58.56.180.60", 7721, 0},
        {"中信证券", "深圳电信主站Z1", "14.17.75.71", 7721, 0},
        {"中信证券", "广州云电信主站Z1", "121.201.83.104", 7721, 0},
        //{"华泰证券", "华泰证券(智选一)", "tdxkzhq.htzq.com.cn", 7721, 0},
        //{"华泰证券", "华泰证券(智选二)", "tdxkzhq.htsc.com", 7721, 0},
        {"华泰证券", "华泰证券(南京电信一)", "180.101.48.170", 7721, 0},
        {"华泰证券", "华泰证券(南京电信二)", "180.101.48.171", 7721, 0},
        {"华泰证券", "华泰证券(南京移动一)", "120.195.71.155", 7721, 0},
        {"华泰证券", "华泰证券(南京移动二)", "120.195.71.156", 7721, 0},
        {"华泰证券", "华泰证券(南京联通一)", "122.96.107.242", 7721, 0},
        {"华泰证券", "华泰证券(南京联通二)", "122.96.107.243", 7721, 0},
        {"华泰证券", "华泰证券(亚马逊一)", "52.83.39.241", 7721, 0},
        {"华泰证券", "华泰证券(亚马逊二)", "52.83.199.101", 7721, 0},
        {"华泰证券", "华泰证券(华南阿里云一)", "8.135.57.58", 7721, 0},
        {"华泰证券", "华泰证券(华南阿里云二)", "8.135.62.177", 7721, 0},
        {"华泰证券", "华泰证券(华东华为云一)", "124.70.183.173", 7721, 0},
        {"华泰证券", "华泰证券(华东华为云二)", "124.71.163.106", 7721, 0},
        {"国泰君安", "扩展行情主站1", "103.221.142.80", 7721, 0},
        {"国泰君安", "扩展行情主站2", "114.118.82.205", 7721, 0},
        {"国泰君安", "扩展行情主站3", "117.34.114.31", 7721, 0},
        {"国泰君安", "扩展行情主站4", "139.9.52.158", 7721, 0},
        {"国泰君安", "扩展行情主站5", "103.251.85.204", 7721, 0},
        {"国泰君安", "扩展行情主站6", "114.118.82.204", 7721, 0},
        {"国泰君安", "扩展行情主站7", "103.221.142.73", 7721, 0}
    };

    cista::offset::vector<Server> detect(i64 elapsed_time, int conn_limit, int connect_timeout_milliseconds) {
        runtime::global_init();
        // 创建线程池
        const size_t num_threads = std::min(static_cast<size_t>(std::thread::hardware_concurrency()), StandardServerList.size());
        std::vector<std::thread> workers;
        std::mutex results_mutex;
        std::vector<Server> best_ips;

        // 工作函数 - 每个线程测试一组服务器
        auto worker_func = [&](size_t start, size_t end) {
            asio::io_context io_context;
            auto work = asio::make_work_guard(io_context);

            // 每个线程有自己的IO上下文和运行线程
            std::thread io_thread([&io_context]() { io_context.run(); });

            for (size_t i = start; i < end; ++i) {
                const auto& v = StandardServerList[i];
                spdlog::debug("{}={}:{}", v.Name, v.Host, v.Port);

                try {
                    asio::ip::tcp::socket socket(io_context);
                    asio::ip::tcp::resolver resolver(io_context);
                    auto endpoints = resolver.resolve(v.Host, std::format("{}", v.Port));
                    auto endpoint = endpoints.begin()->endpoint();

                    auto start_time = std::chrono::high_resolution_clock::now();

                    // 连接服务器
                    try {
                        socket.open(asio::ip::tcp::v4());
                        socket.set_option(asio::socket_base::reuse_address(true));
                        socket.set_option(asio::ip::tcp::no_delay(true));
                        socket.bind(asio::ip::tcp::endpoint(asio::ip::tcp::v4(), 0));

                        // 带超时的异步连接
                        std::future<void> connect_future = socket.async_connect(endpoint, asio::use_future);
                        if (connect_future.wait_for(std::chrono::milliseconds(connect_timeout_milliseconds)) == std::future_status::timeout) {
                            socket.close();
                            spdlog::error("Connection timeout to {}:{}", endpoint.address().to_string(), endpoint.port());
                            throw std::runtime_error("Connection timeout");
                        }
                        connect_future.get();
                    } catch (const std::system_error& e) {
                        if (socket.is_open()) socket.close();
                        spdlog::error("System error while connecting: {} (code: {})", e.what(), e.code().value());
                        throw;
                    } catch (const std::exception& e) {
                        if (socket.is_open()) socket.close();
                        spdlog::error("Error while connecting: {}", e.what());
                        throw;
                    }

                    spdlog::debug("Connected to server");

                    // 协议握手
                    level1::Hello1Request reqHello1;
                    level1::Hello1Response respHello1;
                    level1::process(socket, reqHello1, respHello1);

                    level1::Hello2Request reqHello2;
                    level1::Hello2Response respHello2;
                    level1::process(socket, reqHello2, respHello2);

                    auto end_time = std::chrono::high_resolution_clock::now();
                    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time).count();

                    socket.shutdown(asio::ip::tcp::socket::shutdown_both);
                    socket.close();

                    spdlog::debug("cross time={}", duration);

                    if (duration < elapsed_time) {
                        Server srv = v;
                        srv.CrossTime = duration;

                        std::lock_guard<std::mutex> lock(results_mutex);
                        best_ips.emplace_back(srv);
                    }
                } catch (const std::exception &e) {
                    spdlog::error("Error: {}", e.what());
                }
            }

            io_context.stop();
            if (io_thread.joinable()) {
                io_thread.join();
            }
        };

        // 分配任务给线程
        const size_t servers_per_thread = StandardServerList.size() / num_threads;
        size_t start = 0;
        for (size_t i = 0; i < num_threads; ++i) {
            size_t end = (i == num_threads - 1) ? StandardServerList.size() : start + servers_per_thread;
            workers.emplace_back(worker_func, start, end);
            start = end;
        }

        // 等待所有线程完成
        for (auto& worker : workers) {
            if (worker.joinable()) {
                worker.join();
            }
        }

        // 排序结果
        std::sort(best_ips.begin(), best_ips.end(), [](const Server &a, const Server &b) {
            return a.CrossTime < b.CrossTime;
        });

        // 输出结果
        for (size_t i = 0; i < best_ips.size(); i++) {
            auto v = best_ips[i];
            spdlog::debug("{}: {}={}:{}, crossTime={}", i, v.Name, v.Host, v.Port, v.CrossTime);
        }

        auto length = std::min(best_ips.size(), static_cast<size_t>(conn_limit));
        return {best_ips.begin(), best_ips.begin() + length};
    }
}